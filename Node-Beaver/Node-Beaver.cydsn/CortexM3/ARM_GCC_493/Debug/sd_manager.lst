ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"sd_manager.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	pfile,4,4
  19              		.global	sd_ok
  20              		.bss
  21              		.type	sd_ok, %object
  22              		.size	sd_ok, 1
  23              	sd_ok:
  24 0000 00       		.space	1
  25              		.global	set_time_file
  26              		.section	.rodata
  27              		.align	2
  28              		.type	set_time_file, %object
  29              		.size	set_time_file, 14
  30              	set_time_file:
  31 0000 5C736574 		.ascii	"\\set_time.txt\000"
  31      5F74696D 
  31      652E7478 
  31      7400
  32              		.global	format_file
  33 000e 0000     		.align	2
  34              		.type	format_file, %object
  35              		.size	format_file, 12
  36              	format_file:
  37 0010 5C666F72 		.ascii	"\\format.txt\000"
  37      6D61742E 
  37      74787400 
  38              		.comm	sd_queue,16384,4
  39              		.global	sd_head
  40              		.bss
  41 0001 00       		.align	1
  42              		.type	sd_head, %object
  43              		.size	sd_head, 2
  44              	sd_head:
  45 0002 0000     		.space	2
  46              		.global	sd_tail
  47              		.align	1
  48              		.type	sd_tail, %object
  49              		.size	sd_tail, 2
  50              	sd_tail:
  51 0004 0000     		.space	2
  52              		.section	.text.power_interrupt,"ax",%progbits
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 2


  53              		.align	2
  54              		.global	power_interrupt
  55              		.thumb
  56              		.thumb_func
  57              		.type	power_interrupt, %function
  58              	power_interrupt:
  59              	.LFB63:
  60              		.file 1 "sd_manager.c"
   1:sd_manager.c  **** #include "sd_manager.h"
   2:sd_manager.c  **** 
   3:sd_manager.c  **** 
   4:sd_manager.c  **** FS_FILE* pfile;
   5:sd_manager.c  **** uint8_t sd_ok = 0;
   6:sd_manager.c  **** 
   7:sd_manager.c  **** const char set_time_file[] = "\\set_time.txt";
   8:sd_manager.c  **** const char format_file[] = "\\format.txt";
   9:sd_manager.c  **** 
  10:sd_manager.c  **** DataPacket sd_queue[SD_QUEUE_LENGTH];
  11:sd_manager.c  **** uint16_t sd_head = 0, sd_tail = 0;
  12:sd_manager.c  **** 
  13:sd_manager.c  **** 	
  14:sd_manager.c  **** CY_ISR(power_interrupt) {
  61              		.loc 1 14 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65 0000 80B5     		push	{r7, lr}
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 00AF     		add	r7, sp, #0
  70              		.cfi_def_cfa_register 7
  15:sd_manager.c  ****     LED_Write(1);
  71              		.loc 1 15 0
  72 0004 0120     		movs	r0, #1
  73 0006 FFF7FEFF 		bl	LED_Write
  16:sd_manager.c  **** 	sd_stop();
  74              		.loc 1 16 0
  75 000a FFF7FEFF 		bl	sd_stop
  17:sd_manager.c  **** 	power_isr_ClearPending();
  76              		.loc 1 17 0
  77 000e FFF7FEFF 		bl	power_isr_ClearPending
  18:sd_manager.c  ****     CyDelay(1000);
  78              		.loc 1 18 0
  79 0012 4FF47A70 		mov	r0, #1000
  80 0016 FFF7FEFF 		bl	CyDelay
  81              	.L2:
  19:sd_manager.c  ****     for(;;); // halt program until IC shuts down
  82              		.loc 1 19 0 discriminator 1
  83 001a FEE7     		b	.L2
  84              		.cfi_endproc
  85              	.LFE63:
  86              		.size	power_interrupt, .-power_interrupt
  87              		.section	.text.sd_interrupt,"ax",%progbits
  88              		.align	2
  89              		.global	sd_interrupt
  90              		.thumb
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 3


  91              		.thumb_func
  92              		.type	sd_interrupt, %function
  93              	sd_interrupt:
  94              	.LFB64:
  20:sd_manager.c  **** } // CY_ISR(power_interrupt)
  21:sd_manager.c  **** 
  22:sd_manager.c  **** //triggers every second
  23:sd_manager.c  **** CY_ISR(sd_interrupt) {
  95              		.loc 1 23 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
  24:sd_manager.c  **** 	sd_write();
 105              		.loc 1 24 0
 106 0004 FFF7FEFF 		bl	sd_write
  25:sd_manager.c  **** }
 107              		.loc 1 25 0
 108 0008 80BD     		pop	{r7, pc}
 109              		.cfi_endproc
 110              	.LFE64:
 111              		.size	sd_interrupt, .-sd_interrupt
 112 000a 00BF     		.section	.rodata
 113              		.align	2
 114              	.LC0:
 115 001c 7200     		.ascii	"r\000"
 116 001e 0000     		.align	2
 117              	.LC1:
 118 0020 00       		.ascii	"\000"
 119 0021 000000   		.align	2
 120              	.LC2:
 121 0024 6C6F6773 		.ascii	"logs\000"
 121      00
 122 0029 000000   		.align	2
 123              	.LC3:
 124 002c 5C6C6F67 		.ascii	"\\logs\\%04u-%02u-%02u\000"
 124      735C2530 
 124      34752D25 
 124      3032752D 
 124      25303275 
 125 0041 000000   		.align	2
 126              	.LC4:
 127 0044 25735C28 		.ascii	"%s\\(%04u-%02u-%02u)_%02u.%02u.%02u.csv\000"
 127      25303475 
 127      2D253032 
 127      752D2530 
 127      3275295F 
 128 006b 00       		.align	2
 129              	.LC5:
 130 006c 7700     		.ascii	"w\000"
 131              		.section	.text.sd_init,"ax",%progbits
 132              		.align	2
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 4


 133              		.global	sd_init
 134              		.thumb
 135              		.thumb_func
 136              		.type	sd_init, %function
 137              	sd_init:
 138              	.LFB65:
  26:sd_manager.c  **** 
  27:sd_manager.c  **** /* sd_init()
  28:sd_manager.c  **** 	Takes Time struct (time). Returns nothing.
  29:sd_manager.c  **** 
  30:sd_manager.c  **** 	Initializes SD card filesystem.
  31:sd_manager.c  **** 	The following events will cause the sd_ok flag to be reset, which aborts all
  32:sd_manager.c  **** 	SD functions:
  33:sd_manager.c  **** 		- the SD card is not found
  34:sd_manager.c  **** 		- unable to create the "LOGS" directory
  35:sd_manager.c  **** 		- unable to create a directory named after the date
  36:sd_manager.c  **** 		- unable to create and open file for writing
  37:sd_manager.c  **** 
  38:sd_manager.c  **** 	sd_ok is set when the SD card is functional */
  39:sd_manager.c  **** void sd_init(Time time) {
 139              		.loc 1 39 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 128
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 144              		.cfi_def_cfa_offset 20
 145              		.cfi_offset 4, -20
 146              		.cfi_offset 5, -16
 147              		.cfi_offset 6, -12
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 A7B0     		sub	sp, sp, #156
 151              		.cfi_def_cfa_offset 176
 152 0004 06AF     		add	r7, sp, #24
 153              		.cfi_def_cfa 7, 152
 154 0006 3C46     		mov	r4, r7
 155 0008 84E80F00 		stmia	r4, {r0, r1, r2, r3}
  40:sd_manager.c  **** 	/* power_isr note:
  41:sd_manager.c  **** 		Triggers unexpectedly due to floating pin/environmental voltages and
  42:sd_manager.c  **** 		capacitance. power isr is disabled for prototyping only.	*/
  43:sd_manager.c  **** 	power_comp_Start();
 156              		.loc 1 43 0
 157 000c FFF7FEFF 		bl	power_comp_Start
  44:sd_manager.c  **** 	power_isr_ClearPending();
 158              		.loc 1 44 0
 159 0010 FFF7FEFF 		bl	power_isr_ClearPending
  45:sd_manager.c  **** 	power_isr_StartEx(power_interrupt);
 160              		.loc 1 45 0
 161 0014 5948     		ldr	r0, .L12
 162 0016 FFF7FEFF 		bl	power_isr_StartEx
  46:sd_manager.c  **** 	sd_timer_Start();
 163              		.loc 1 46 0
 164 001a FFF7FEFF 		bl	sd_timer_Start
  47:sd_manager.c  **** 	sd_isr_StartEx(sd_interrupt);
 165              		.loc 1 47 0
 166 001e 5848     		ldr	r0, .L12+4
 167 0020 FFF7FEFF 		bl	sd_isr_StartEx
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 5


  48:sd_manager.c  ****     
  49:sd_manager.c  **** 	FS_Init();
 168              		.loc 1 49 0
 169 0024 FFF7FEFF 		bl	FS_Init
  50:sd_manager.c  ****     FS_FAT_SupportLFN();            //enable long file name: filenames>8bytes
 170              		.loc 1 50 0
 171 0028 FFF7FEFF 		bl	FS_FAT_SupportLFN
  51:sd_manager.c  **** 	sd_ok = 1;
 172              		.loc 1 51 0
 173 002c 554B     		ldr	r3, .L12+8
 174 002e 0122     		movs	r2, #1
 175 0030 1A70     		strb	r2, [r3]
  52:sd_manager.c  **** 	char date_str[32], file_str[64];
  53:sd_manager.c  **** 	uint32_t vsize;
  54:sd_manager.c  **** 
  55:sd_manager.c  **** 	if(FS_GetNumVolumes() == 1) {
 176              		.loc 1 55 0
 177 0032 FFF7FEFF 		bl	FS_GetNumVolumes
 178 0036 0346     		mov	r3, r0
 179 0038 012B     		cmp	r3, #1
 180 003a 40F09880 		bne	.L5
 181              	.LBB2:
  56:sd_manager.c  **** 		FS_SetFileWriteMode(FS_WRITEMODE_FAST);
 182              		.loc 1 56 0
 183 003e 0220     		movs	r0, #2
 184 0040 FFF7FEFF 		bl	FS_SetFileWriteMode
  57:sd_manager.c  **** 		if((pfile = FS_FOpen(format_file, "r")) && FS_GetVolumeSize("") <= 0xFFFFFFFF)	//for FAT only
 185              		.loc 1 57 0
 186 0044 5048     		ldr	r0, .L12+12
 187 0046 5149     		ldr	r1, .L12+16
 188 0048 FFF7FEFF 		bl	FS_FOpen
 189 004c 0246     		mov	r2, r0
 190 004e 504B     		ldr	r3, .L12+20
 191 0050 1A60     		str	r2, [r3]
 192 0052 4F4B     		ldr	r3, .L12+20
 193 0054 1B68     		ldr	r3, [r3]
 194 0056 002B     		cmp	r3, #0
 195 0058 05D0     		beq	.L6
 196              		.loc 1 57 0 is_stmt 0 discriminator 1
 197 005a 4E48     		ldr	r0, .L12+24
 198 005c FFF7FEFF 		bl	FS_GetVolumeSize
  58:sd_manager.c  **** 			FS_FormatSD("");
 199              		.loc 1 58 0 is_stmt 1 discriminator 1
 200 0060 4C48     		ldr	r0, .L12+24
 201 0062 FFF7FEFF 		bl	FS_FormatSD
 202              	.L6:
  59:sd_manager.c  ****         sd_time_set(time);          //set time from a file
 203              		.loc 1 59 0
 204 0066 3B46     		mov	r3, r7
 205 0068 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 206 006a FFF7FEFF 		bl	sd_time_set
  60:sd_manager.c  **** 		
  61:sd_manager.c  ****         //create logs folder
  62:sd_manager.c  **** 		if(FS_ATTR_DIRECTORY != FS_GetFileAttributes("logs")) { // if logs not a dir
 207              		.loc 1 62 0
 208 006e 4A48     		ldr	r0, .L12+28
 209 0070 FFF7FEFF 		bl	FS_GetFileAttributes
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 6


 210 0074 0346     		mov	r3, r0
 211 0076 102B     		cmp	r3, #16
 212 0078 09D0     		beq	.L7
  63:sd_manager.c  **** 			if(FS_MkDir("logs")) {
 213              		.loc 1 63 0
 214 007a 4748     		ldr	r0, .L12+28
 215 007c FFF7FEFF 		bl	FS_MkDir
 216 0080 0346     		mov	r3, r0
 217 0082 002B     		cmp	r3, #0
 218 0084 03D0     		beq	.L7
  64:sd_manager.c  **** 				sd_ok = 0;
 219              		.loc 1 64 0
 220 0086 3F4B     		ldr	r3, .L12+8
 221 0088 0022     		movs	r2, #0
 222 008a 1A70     		strb	r2, [r3]
  65:sd_manager.c  **** 				return;
 223              		.loc 1 65 0
 224 008c 72E0     		b	.L4
 225              	.L7:
  66:sd_manager.c  **** 			} // if logs folder can't be created
  67:sd_manager.c  ****         }
  68:sd_manager.c  **** 
  69:sd_manager.c  **** 
  70:sd_manager.c  **** 		// create date folder 
  71:sd_manager.c  ****         sprintf(date_str, "\\logs\\%04u-%02u-%02u", time.year, time.month, time.day);
 226              		.loc 1 71 0
 227 008e BB89     		ldrh	r3, [r7, #12]
 228 0090 1D46     		mov	r5, r3
 229 0092 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 230 0094 1C46     		mov	r4, r3
 231 0096 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 232 0098 1A46     		mov	r2, r3
 233 009a 07F16003 		add	r3, r7, #96
 234 009e 0092     		str	r2, [sp]
 235 00a0 1846     		mov	r0, r3
 236 00a2 3E49     		ldr	r1, .L12+32
 237 00a4 2A46     		mov	r2, r5
 238 00a6 2346     		mov	r3, r4
 239 00a8 FFF7FEFF 		bl	sprintf
  72:sd_manager.c  **** 		if(FS_ATTR_DIRECTORY != FS_GetFileAttributes(date_str)) { // if day not a dir
 240              		.loc 1 72 0
 241 00ac 07F16003 		add	r3, r7, #96
 242 00b0 1846     		mov	r0, r3
 243 00b2 FFF7FEFF 		bl	FS_GetFileAttributes
 244 00b6 0346     		mov	r3, r0
 245 00b8 102B     		cmp	r3, #16
 246 00ba 0BD0     		beq	.L9
  73:sd_manager.c  **** 			if(FS_MkDir(date_str)) {
 247              		.loc 1 73 0
 248 00bc 07F16003 		add	r3, r7, #96
 249 00c0 1846     		mov	r0, r3
 250 00c2 FFF7FEFF 		bl	FS_MkDir
 251 00c6 0346     		mov	r3, r0
 252 00c8 002B     		cmp	r3, #0
 253 00ca 03D0     		beq	.L9
  74:sd_manager.c  **** 				sd_ok = 0;
 254              		.loc 1 74 0
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 7


 255 00cc 2D4B     		ldr	r3, .L12+8
 256 00ce 0022     		movs	r2, #0
 257 00d0 1A70     		strb	r2, [r3]
  75:sd_manager.c  **** 				return;
 258              		.loc 1 75 0
 259 00d2 4FE0     		b	.L4
 260              	.L9:
  76:sd_manager.c  **** 			} // if day folder can't be created
  77:sd_manager.c  ****         }
  78:sd_manager.c  ****         
  79:sd_manager.c  ****         // create log file
  80:sd_manager.c  ****         sprintf(file_str, "%s\\(%04u-%02u-%02u)_%02u.%02u.%02u.csv",
  81:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 261              		.loc 1 81 0
 262 00d4 BB89     		ldrh	r3, [r7, #12]
  80:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 263              		.loc 1 80 0
 264 00d6 9E46     		mov	lr, r3
 265              		.loc 1 81 0
 266 00d8 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
  80:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 267              		.loc 1 80 0
 268 00da 1E46     		mov	r6, r3
 269              		.loc 1 81 0
 270 00dc 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
  80:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 271              		.loc 1 80 0
 272 00de 1D46     		mov	r5, r3
 273              		.loc 1 81 0
 274 00e0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
  80:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 275              		.loc 1 80 0
 276 00e2 1C46     		mov	r4, r3
 277              		.loc 1 81 0
 278 00e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
  80:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 279              		.loc 1 80 0
 280 00e6 1846     		mov	r0, r3
 281              		.loc 1 81 0
 282 00e8 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
  80:sd_manager.c  ****             date_str, time.year, time.month, time.day, time.hour, time.minute, time.second);
 283              		.loc 1 80 0
 284 00ea 1946     		mov	r1, r3
 285 00ec 07F12002 		add	r2, r7, #32
 286 00f0 07F16003 		add	r3, r7, #96
 287 00f4 0096     		str	r6, [sp]
 288 00f6 0195     		str	r5, [sp, #4]
 289 00f8 0294     		str	r4, [sp, #8]
 290 00fa 0390     		str	r0, [sp, #12]
 291 00fc 0491     		str	r1, [sp, #16]
 292 00fe 1046     		mov	r0, r2
 293 0100 2749     		ldr	r1, .L12+36
 294 0102 1A46     		mov	r2, r3
 295 0104 7346     		mov	r3, lr
 296 0106 FFF7FEFF 		bl	sprintf
  82:sd_manager.c  **** 		pfile = FS_FOpen(file_str, "w"); //create and open new file for writing
 297              		.loc 1 82 0
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 8


 298 010a 07F12003 		add	r3, r7, #32
 299 010e 1846     		mov	r0, r3
 300 0110 2449     		ldr	r1, .L12+40
 301 0112 FFF7FEFF 		bl	FS_FOpen
 302 0116 0246     		mov	r2, r0
 303 0118 1D4B     		ldr	r3, .L12+20
 304 011a 1A60     		str	r2, [r3]
  83:sd_manager.c  **** 		if(pfile == NULL) {
 305              		.loc 1 83 0
 306 011c 1C4B     		ldr	r3, .L12+20
 307 011e 1B68     		ldr	r3, [r3]
 308 0120 002B     		cmp	r3, #0
 309 0122 04D1     		bne	.L10
  84:sd_manager.c  **** 			sd_ok = 0;
 310              		.loc 1 84 0
 311 0124 174B     		ldr	r3, .L12+8
 312 0126 0022     		movs	r2, #0
 313 0128 1A70     		strb	r2, [r3]
  85:sd_manager.c  **** 			return;
 314              		.loc 1 85 0
 315 012a 00BF     		nop
 316 012c 22E0     		b	.L4
 317              	.L10:
  86:sd_manager.c  **** 		} // if file does not exist
  87:sd_manager.c  **** 
  88:sd_manager.c  **** 		// Set file time here
  89:sd_manager.c  **** 		FS_FILETIME file_time;
  90:sd_manager.c  **** 		unsigned long file_timestamp;
  91:sd_manager.c  **** 		
  92:sd_manager.c  **** 		file_time.Year = time.year;
 318              		.loc 1 92 0
 319 012e BB89     		ldrh	r3, [r7, #12]
 320 0130 BB82     		strh	r3, [r7, #20]	@ movhi
  93:sd_manager.c  **** 		file_time.Month = time.month;
 321              		.loc 1 93 0
 322 0132 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 323 0134 9BB2     		uxth	r3, r3
 324 0136 FB82     		strh	r3, [r7, #22]	@ movhi
  94:sd_manager.c  **** 		file_time.Day = time.day;
 325              		.loc 1 94 0
 326 0138 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 327 013a 9BB2     		uxth	r3, r3
 328 013c 3B83     		strh	r3, [r7, #24]	@ movhi
  95:sd_manager.c  **** 		file_time.Hour = time.hour;
 329              		.loc 1 95 0
 330 013e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 331 0140 9BB2     		uxth	r3, r3
 332 0142 7B83     		strh	r3, [r7, #26]	@ movhi
  96:sd_manager.c  **** 		file_time.Minute = time.minute;
 333              		.loc 1 96 0
 334 0144 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 335 0146 9BB2     		uxth	r3, r3
 336 0148 BB83     		strh	r3, [r7, #28]	@ movhi
  97:sd_manager.c  **** 		file_time.Second = time.second;
 337              		.loc 1 97 0
 338 014a 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 339 014c 9BB2     		uxth	r3, r3
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 9


 340 014e FB83     		strh	r3, [r7, #30]	@ movhi
  98:sd_manager.c  **** 
  99:sd_manager.c  **** 		FS_FileTimeToTimeStamp(&file_time, &file_timestamp);
 341              		.loc 1 99 0
 342 0150 07F11402 		add	r2, r7, #20
 343 0154 07F11003 		add	r3, r7, #16
 344 0158 1046     		mov	r0, r2
 345 015a 1946     		mov	r1, r3
 346 015c FFF7FEFF 		bl	FS_FileTimeToTimeStamp
 100:sd_manager.c  **** 		FS_SetFileTime(file_str, file_timestamp);
 347              		.loc 1 100 0
 348 0160 3B69     		ldr	r3, [r7, #16]
 349 0162 07F12002 		add	r2, r7, #32
 350 0166 1046     		mov	r0, r2
 351 0168 1946     		mov	r1, r3
 352 016a FFF7FEFF 		bl	FS_SetFileTime
 353              	.L5:
 354              	.LBE2:
 101:sd_manager.c  **** 		/*FS_SetFileTimeEx(file_str, file_timestamp, FS_FILETIME_CREATE);	//doesnt work
 102:sd_manager.c  **** 		FS_SetFileTimeEx(file_str, file_timestamp, FS_FILETIME_ACCESS);
 103:sd_manager.c  **** 		FS_SetFileTimeEx(file_str, file_timestamp, FS_FILETIME_MODIFY);*/
 104:sd_manager.c  **** 	} // if a single file volume exists
 105:sd_manager.c  ****     FS_Sync("");
 355              		.loc 1 105 0 discriminator 1
 356 016e 0948     		ldr	r0, .L12+24
 357 0170 FFF7FEFF 		bl	FS_Sync
 358              	.L4:
 106:sd_manager.c  **** } // sd_init()
 359              		.loc 1 106 0
 360 0174 8437     		adds	r7, r7, #132
 361              		.cfi_def_cfa_offset 20
 362 0176 BD46     		mov	sp, r7
 363              		.cfi_def_cfa_register 13
 364              		@ sp needed
 365 0178 F0BD     		pop	{r4, r5, r6, r7, pc}
 366              	.L13:
 367 017a 00BF     		.align	2
 368              	.L12:
 369 017c 00000000 		.word	power_interrupt
 370 0180 00000000 		.word	sd_interrupt
 371 0184 00000000 		.word	sd_ok
 372 0188 00000000 		.word	format_file
 373 018c 1C000000 		.word	.LC0
 374 0190 00000000 		.word	pfile
 375 0194 20000000 		.word	.LC1
 376 0198 24000000 		.word	.LC2
 377 019c 2C000000 		.word	.LC3
 378 01a0 44000000 		.word	.LC4
 379 01a4 6C000000 		.word	.LC5
 380              		.cfi_endproc
 381              	.LFE65:
 382              		.size	sd_init, .-sd_init
 383              		.section	.rodata
 384 006e 0000     		.align	2
 385              	.LC6:
 386 0070 2F3A200D 		.ascii	"/: \015\012\000"
 386      0A00
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 10


 387              		.section	.text.sd_time_set,"ax",%progbits
 388              		.align	2
 389              		.global	sd_time_set
 390              		.thumb
 391              		.thumb_func
 392              		.type	sd_time_set, %function
 393              	sd_time_set:
 394              	.LFB66:
 107:sd_manager.c  **** 
 108:sd_manager.c  **** 
 109:sd_manager.c  **** /*  Sets the RTC time from a file called set_time.txt if it exists
 110:sd_manager.c  ****     
 111:sd_manager.c  **** 	Enter the following two lines of text in a file called "set_time.txt" in
 112:sd_manager.c  **** 	the /LOGS folder to set the time. The line breaks can consist of \r or
 113:sd_manager.c  **** 	\n characters.
 114:sd_manager.c  **** 	
 115:sd_manager.c  **** 	year/month/day
 116:sd_manager.c  **** 	24-hour:minute:second */
 117:sd_manager.c  **** void sd_time_set(Time time) {
 395              		.loc 1 117 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 104
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399 0000 90B5     		push	{r4, r7, lr}
 400              		.cfi_def_cfa_offset 12
 401              		.cfi_offset 4, -12
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404 0002 9BB0     		sub	sp, sp, #108
 405              		.cfi_def_cfa_offset 120
 406 0004 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
 408 0006 3C46     		mov	r4, r7
 409 0008 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 118:sd_manager.c  **** 	if((pfile = FS_FOpen(set_time_file, "r"))) {
 410              		.loc 1 118 0
 411 000c 5B48     		ldr	r0, .L23
 412 000e 5C49     		ldr	r1, .L23+4
 413 0010 FFF7FEFF 		bl	FS_FOpen
 414 0014 0246     		mov	r2, r0
 415 0016 5B4B     		ldr	r3, .L23+8
 416 0018 1A60     		str	r2, [r3]
 417 001a 5A4B     		ldr	r3, .L23+8
 418 001c 1B68     		ldr	r3, [r3]
 419 001e 002B     		cmp	r3, #0
 420 0020 00F0A980 		beq	.L14
 421              	.LBB3:
 119:sd_manager.c  **** 		char buffer[64];
 120:sd_manager.c  **** 		char *ptr;
 121:sd_manager.c  **** 		uint16_t num;
 122:sd_manager.c  **** 		Time tmp_time;
 123:sd_manager.c  **** 
 124:sd_manager.c  **** 		FS_Read(pfile, buffer, 64); // read entire file
 422              		.loc 1 124 0
 423 0024 574B     		ldr	r3, .L23+8
 424 0026 1A68     		ldr	r2, [r3]
 425 0028 07F11003 		add	r3, r7, #16
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 11


 426 002c 1046     		mov	r0, r2
 427 002e 1946     		mov	r1, r3
 428 0030 4022     		movs	r2, #64
 429 0032 FFF7FEFF 		bl	FS_Read
 125:sd_manager.c  **** 		
 126:sd_manager.c  **** 		ptr = strtok(buffer, "/: \r\n"); // year
 430              		.loc 1 126 0
 431 0036 07F11003 		add	r3, r7, #16
 432 003a 1846     		mov	r0, r3
 433 003c 5249     		ldr	r1, .L23+12
 434 003e FFF7FEFF 		bl	strtok
 435 0042 7866     		str	r0, [r7, #100]
 127:sd_manager.c  **** 		num = atoi(ptr);
 436              		.loc 1 127 0
 437 0044 786E     		ldr	r0, [r7, #100]
 438 0046 FFF7FEFF 		bl	atoi
 439 004a 0346     		mov	r3, r0
 440 004c A7F86230 		strh	r3, [r7, #98]	@ movhi
 128:sd_manager.c  **** 		if(num <= 99) tmp_time.year = num;  // 2 digit year
 441              		.loc 1 128 0
 442 0050 B7F86230 		ldrh	r3, [r7, #98]
 443 0054 632B     		cmp	r3, #99
 444 0056 04D8     		bhi	.L16
 445              		.loc 1 128 0 is_stmt 0 discriminator 1
 446 0058 B7F86230 		ldrh	r3, [r7, #98]	@ movhi
 447 005c A7F85C30 		strh	r3, [r7, #92]	@ movhi
 448 0060 12E0     		b	.L17
 449              	.L16:
 129:sd_manager.c  **** 		else if(num >= 1900) tmp_time.year = num % 100; // 4 digit year
 450              		.loc 1 129 0 is_stmt 1
 451 0062 B7F86230 		ldrh	r3, [r7, #98]
 452 0066 40F26B72 		movw	r2, #1899
 453 006a 9342     		cmp	r3, r2
 454 006c 0CD9     		bls	.L17
 455              		.loc 1 129 0 is_stmt 0 discriminator 1
 456 006e B7F86230 		ldrh	r3, [r7, #98]
 457 0072 464A     		ldr	r2, .L23+16
 458 0074 A2FB0312 		umull	r1, r2, r2, r3
 459 0078 5209     		lsrs	r2, r2, #5
 460 007a 6421     		movs	r1, #100
 461 007c 01FB02F2 		mul	r2, r1, r2
 462 0080 9B1A     		subs	r3, r3, r2
 463 0082 9BB2     		uxth	r3, r3
 464 0084 A7F85C30 		strh	r3, [r7, #92]	@ movhi
 465              	.L17:
 130:sd_manager.c  **** 
 131:sd_manager.c  **** 		ptr = strtok(NULL, "/: \r\n"); // month
 466              		.loc 1 131 0 is_stmt 1
 467 0088 0020     		movs	r0, #0
 468 008a 3F49     		ldr	r1, .L23+12
 469 008c FFF7FEFF 		bl	strtok
 470 0090 7866     		str	r0, [r7, #100]
 132:sd_manager.c  **** 		num = atoi(ptr);
 471              		.loc 1 132 0
 472 0092 786E     		ldr	r0, [r7, #100]
 473 0094 FFF7FEFF 		bl	atoi
 474 0098 0346     		mov	r3, r0
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 12


 475 009a A7F86230 		strh	r3, [r7, #98]	@ movhi
 133:sd_manager.c  **** 		if(num <= 12) tmp_time.month = num;
 476              		.loc 1 133 0
 477 009e B7F86230 		ldrh	r3, [r7, #98]
 478 00a2 0C2B     		cmp	r3, #12
 479 00a4 04D8     		bhi	.L18
 480              		.loc 1 133 0 is_stmt 0 discriminator 1
 481 00a6 B7F86230 		ldrh	r3, [r7, #98]	@ movhi
 482 00aa DBB2     		uxtb	r3, r3
 483 00ac 87F85030 		strb	r3, [r7, #80]
 484              	.L18:
 134:sd_manager.c  **** 		
 135:sd_manager.c  **** 		ptr = strtok(NULL, "/: \r\n"); // day
 485              		.loc 1 135 0 is_stmt 1
 486 00b0 0020     		movs	r0, #0
 487 00b2 3549     		ldr	r1, .L23+12
 488 00b4 FFF7FEFF 		bl	strtok
 489 00b8 7866     		str	r0, [r7, #100]
 136:sd_manager.c  **** 		num = atoi(ptr);
 490              		.loc 1 136 0
 491 00ba 786E     		ldr	r0, [r7, #100]
 492 00bc FFF7FEFF 		bl	atoi
 493 00c0 0346     		mov	r3, r0
 494 00c2 A7F86230 		strh	r3, [r7, #98]	@ movhi
 137:sd_manager.c  **** 		if(num <= 31) tmp_time.day = num;
 495              		.loc 1 137 0
 496 00c6 B7F86230 		ldrh	r3, [r7, #98]
 497 00ca 1F2B     		cmp	r3, #31
 498 00cc 04D8     		bhi	.L19
 499              		.loc 1 137 0 is_stmt 0 discriminator 1
 500 00ce B7F86230 		ldrh	r3, [r7, #98]	@ movhi
 501 00d2 DBB2     		uxtb	r3, r3
 502 00d4 87F85130 		strb	r3, [r7, #81]
 503              	.L19:
 138:sd_manager.c  **** 			
 139:sd_manager.c  **** 		ptr = strtok(NULL, "/: \r\n"); // 24-hour
 504              		.loc 1 139 0 is_stmt 1
 505 00d8 0020     		movs	r0, #0
 506 00da 2B49     		ldr	r1, .L23+12
 507 00dc FFF7FEFF 		bl	strtok
 508 00e0 7866     		str	r0, [r7, #100]
 140:sd_manager.c  **** 		num = atoi(ptr);
 509              		.loc 1 140 0
 510 00e2 786E     		ldr	r0, [r7, #100]
 511 00e4 FFF7FEFF 		bl	atoi
 512 00e8 0346     		mov	r3, r0
 513 00ea A7F86230 		strh	r3, [r7, #98]	@ movhi
 141:sd_manager.c  **** 		if(num <= 23) tmp_time.hour = num;
 514              		.loc 1 141 0
 515 00ee B7F86230 		ldrh	r3, [r7, #98]
 516 00f2 172B     		cmp	r3, #23
 517 00f4 04D8     		bhi	.L20
 518              		.loc 1 141 0 is_stmt 0 discriminator 1
 519 00f6 B7F86230 		ldrh	r3, [r7, #98]	@ movhi
 520 00fa DBB2     		uxtb	r3, r3
 521 00fc 87F85230 		strb	r3, [r7, #82]
 522              	.L20:
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 13


 142:sd_manager.c  **** 
 143:sd_manager.c  **** 		ptr = strtok(NULL, "/: \r\n"); // minute
 523              		.loc 1 143 0 is_stmt 1
 524 0100 0020     		movs	r0, #0
 525 0102 2149     		ldr	r1, .L23+12
 526 0104 FFF7FEFF 		bl	strtok
 527 0108 7866     		str	r0, [r7, #100]
 144:sd_manager.c  **** 		num = atoi(ptr);
 528              		.loc 1 144 0
 529 010a 786E     		ldr	r0, [r7, #100]
 530 010c FFF7FEFF 		bl	atoi
 531 0110 0346     		mov	r3, r0
 532 0112 A7F86230 		strh	r3, [r7, #98]	@ movhi
 145:sd_manager.c  **** 		if(num <= 59) tmp_time.minute = num;
 533              		.loc 1 145 0
 534 0116 B7F86230 		ldrh	r3, [r7, #98]
 535 011a 3B2B     		cmp	r3, #59
 536 011c 04D8     		bhi	.L21
 537              		.loc 1 145 0 is_stmt 0 discriminator 1
 538 011e B7F86230 		ldrh	r3, [r7, #98]	@ movhi
 539 0122 DBB2     		uxtb	r3, r3
 540 0124 87F85330 		strb	r3, [r7, #83]
 541              	.L21:
 146:sd_manager.c  **** 
 147:sd_manager.c  **** 		ptr = strtok(NULL, "/: \r\n"); // second 
 542              		.loc 1 147 0 is_stmt 1
 543 0128 0020     		movs	r0, #0
 544 012a 1749     		ldr	r1, .L23+12
 545 012c FFF7FEFF 		bl	strtok
 546 0130 7866     		str	r0, [r7, #100]
 148:sd_manager.c  **** 		num = atoi(ptr);
 547              		.loc 1 148 0
 548 0132 786E     		ldr	r0, [r7, #100]
 549 0134 FFF7FEFF 		bl	atoi
 550 0138 0346     		mov	r3, r0
 551 013a A7F86230 		strh	r3, [r7, #98]	@ movhi
 149:sd_manager.c  **** 		if(num <= 59) tmp_time.second = num;
 552              		.loc 1 149 0
 553 013e B7F86230 		ldrh	r3, [r7, #98]
 554 0142 3B2B     		cmp	r3, #59
 555 0144 04D8     		bhi	.L22
 556              		.loc 1 149 0 is_stmt 0 discriminator 1
 557 0146 B7F86230 		ldrh	r3, [r7, #98]	@ movhi
 558 014a DBB2     		uxtb	r3, r3
 559 014c 87F85430 		strb	r3, [r7, #84]
 560              	.L22:
 150:sd_manager.c  **** 
 151:sd_manager.c  **** 		FS_FClose(pfile);
 561              		.loc 1 151 0 is_stmt 1
 562 0150 0C4B     		ldr	r3, .L23+8
 563 0152 1B68     		ldr	r3, [r3]
 564 0154 1846     		mov	r0, r3
 565 0156 FFF7FEFF 		bl	FS_FClose
 152:sd_manager.c  **** 
 153:sd_manager.c  **** 		time_set(tmp_time); // set the new time
 566              		.loc 1 153 0
 567 015a 07F15003 		add	r3, r7, #80
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 14


 568 015e 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 569 0160 FFF7FEFF 		bl	time_set
 154:sd_manager.c  **** 		time = tmp_time; // use new time for file names
 570              		.loc 1 154 0
 571 0164 3C46     		mov	r4, r7
 572 0166 07F15003 		add	r3, r7, #80
 573 016a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 574 016c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 155:sd_manager.c  **** 		
 156:sd_manager.c  **** 		FS_Remove(set_time_file); // delete file
 575              		.loc 1 156 0
 576 0170 0248     		ldr	r0, .L23
 577 0172 FFF7FEFF 		bl	FS_Remove
 578              	.L14:
 579              	.LBE3:
 157:sd_manager.c  **** 	} // try to find file and set time
 158:sd_manager.c  **** } //sd_time_set()
 580              		.loc 1 158 0
 581 0176 6C37     		adds	r7, r7, #108
 582              		.cfi_def_cfa_offset 12
 583 0178 BD46     		mov	sp, r7
 584              		.cfi_def_cfa_register 13
 585              		@ sp needed
 586 017a 90BD     		pop	{r4, r7, pc}
 587              	.L24:
 588              		.align	2
 589              	.L23:
 590 017c 00000000 		.word	set_time_file
 591 0180 1C000000 		.word	.LC0
 592 0184 00000000 		.word	pfile
 593 0188 70000000 		.word	.LC6
 594 018c 1F85EB51 		.word	1374389535
 595              		.cfi_endproc
 596              	.LFE66:
 597              		.size	sd_time_set, .-sd_time_set
 598              		.section	.rodata
 599 0076 0000     		.align	2
 600              	.LC7:
 601 0078 25582C25 		.ascii	"%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\012\000"
 601      752C2558 
 601      2C25582C 
 601      25582C25 
 601      582C2558 
 602              		.section	.text.sd_write,"ax",%progbits
 603              		.align	2
 604              		.global	sd_write
 605              		.thumb
 606              		.thumb_func
 607              		.type	sd_write, %function
 608              	sd_write:
 609              	.LFB67:
 159:sd_manager.c  **** 
 160:sd_manager.c  **** 
 161:sd_manager.c  **** /* sd_write()
 162:sd_manager.c  **** 	Writes current to the SD card. 
 163:sd_manager.c  **** 	Synchronizes the filesystem after it is  written. */
 164:sd_manager.c  **** void sd_write() {
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 15


 610              		.loc 1 164 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 72
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 615              		.cfi_def_cfa_offset 28
 616              		.cfi_offset 4, -28
 617              		.cfi_offset 5, -24
 618              		.cfi_offset 6, -20
 619              		.cfi_offset 7, -16
 620              		.cfi_offset 8, -12
 621              		.cfi_offset 9, -8
 622              		.cfi_offset 14, -4
 623 0004 9BB0     		sub	sp, sp, #108
 624              		.cfi_def_cfa_offset 136
 625 0006 08AF     		add	r7, sp, #32
 626              		.cfi_def_cfa 7, 104
 165:sd_manager.c  **** 	if(!sd_ok) return;
 627              		.loc 1 165 0
 628 0008 4D4B     		ldr	r3, .L30
 629 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 000c 002B     		cmp	r3, #0
 631 000e 00F09280 		beq	.L25
 166:sd_manager.c  **** 
 167:sd_manager.c  **** 	char buffer[64];
 168:sd_manager.c  **** 	short length = 0;
 632              		.loc 1 168 0
 633 0012 0023     		movs	r3, #0
 634 0014 A7F84630 		strh	r3, [r7, #70]	@ movhi
 169:sd_manager.c  **** 	
 170:sd_manager.c  ****     uint8_t atomic_state = CyEnterCriticalSection(); // BEGIN ATOMIC
 635              		.loc 1 170 0
 636 0018 FFF7FEFF 		bl	CyEnterCriticalSection
 637 001c 0346     		mov	r3, r0
 638 001e 87F84530 		strb	r3, [r7, #69]
 171:sd_manager.c  **** 	for(sd_head=0; sd_head<sd_tail; sd_head++) {
 639              		.loc 1 171 0
 640 0022 484B     		ldr	r3, .L30+4
 641 0024 0022     		movs	r2, #0
 642 0026 1A80     		strh	r2, [r3]	@ movhi
 643 0028 71E0     		b	.L28
 644              	.L29:
 172:sd_manager.c  **** 		length = sprintf(buffer, "%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\n",
 173:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 645              		.loc 1 173 0 discriminator 3
 646 002a 464B     		ldr	r3, .L30+4
 647 002c 1B88     		ldrh	r3, [r3]
 648 002e 464A     		ldr	r2, .L30+8
 649 0030 1B01     		lsls	r3, r3, #4
 650 0032 1344     		add	r3, r3, r2
 651 0034 9B88     		ldrh	r3, [r3, #4]
 172:sd_manager.c  **** 		length = sprintf(buffer, "%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\n",
 652              		.loc 1 172 0 discriminator 3
 653 0036 9946     		mov	r9, r3
 174:sd_manager.c  **** 			MILLI_PERIOD - (unsigned)sd_queue[sd_head].millicounter,
 654              		.loc 1 174 0 discriminator 3
 655 0038 424B     		ldr	r3, .L30+4
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 16


 656 003a 1B88     		ldrh	r3, [r3]
 657 003c 424A     		ldr	r2, .L30+8
 658 003e 1B01     		lsls	r3, r3, #4
 659 0040 1344     		add	r3, r3, r2
 660 0042 1A68     		ldr	r2, [r3]
 172:sd_manager.c  **** 		length = sprintf(buffer, "%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\n",
 661              		.loc 1 172 0 discriminator 3
 662 0044 414B     		ldr	r3, .L30+12
 663 0046 9B1A     		subs	r3, r3, r2
 175:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[0],
 664              		.loc 1 175 0 discriminator 3
 665 0048 3E4A     		ldr	r2, .L30+4
 666 004a 1288     		ldrh	r2, [r2]
 667 004c 3E49     		ldr	r1, .L30+8
 668 004e 1201     		lsls	r2, r2, #4
 669 0050 0A44     		add	r2, r2, r1
 670 0052 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 		length = sprintf(buffer, "%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\n",
 671              		.loc 1 172 0 discriminator 3
 672 0054 9046     		mov	r8, r2
 176:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[1],
 673              		.loc 1 176 0 discriminator 3
 674 0056 3B4A     		ldr	r2, .L30+4
 675 0058 1288     		ldrh	r2, [r2]
 676 005a 3B49     		ldr	r1, .L30+8
 677 005c 1201     		lsls	r2, r2, #4
 678 005e 0A44     		add	r2, r2, r1
 679 0060 0132     		adds	r2, r2, #1
 680 0062 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 681              		.loc 1 172 0 discriminator 3
 682 0064 9446     		mov	ip, r2
 177:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[2],
 683              		.loc 1 177 0 discriminator 3
 684 0066 374A     		ldr	r2, .L30+4
 685 0068 1288     		ldrh	r2, [r2]
 686 006a 3749     		ldr	r1, .L30+8
 687 006c 1201     		lsls	r2, r2, #4
 688 006e 0A44     		add	r2, r2, r1
 689 0070 0232     		adds	r2, r2, #2
 690 0072 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 691              		.loc 1 172 0 discriminator 3
 692 0074 9646     		mov	lr, r2
 178:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[3],
 693              		.loc 1 178 0 discriminator 3
 694 0076 334A     		ldr	r2, .L30+4
 695 0078 1288     		ldrh	r2, [r2]
 696 007a 3349     		ldr	r1, .L30+8
 697 007c 1201     		lsls	r2, r2, #4
 698 007e 0A44     		add	r2, r2, r1
 699 0080 0332     		adds	r2, r2, #3
 700 0082 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 701              		.loc 1 172 0 discriminator 3
 702 0084 1646     		mov	r6, r2
 179:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[4],
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 17


 703              		.loc 1 179 0 discriminator 3
 704 0086 2F4A     		ldr	r2, .L30+4
 705 0088 1288     		ldrh	r2, [r2]
 706 008a 2F49     		ldr	r1, .L30+8
 707 008c 1201     		lsls	r2, r2, #4
 708 008e 0A44     		add	r2, r2, r1
 709 0090 0432     		adds	r2, r2, #4
 710 0092 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 711              		.loc 1 172 0 discriminator 3
 712 0094 1546     		mov	r5, r2
 180:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[5],
 713              		.loc 1 180 0 discriminator 3
 714 0096 2B4A     		ldr	r2, .L30+4
 715 0098 1288     		ldrh	r2, [r2]
 716 009a 2B49     		ldr	r1, .L30+8
 717 009c 1201     		lsls	r2, r2, #4
 718 009e 0A44     		add	r2, r2, r1
 719 00a0 0532     		adds	r2, r2, #5
 720 00a2 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 721              		.loc 1 172 0 discriminator 3
 722 00a4 1446     		mov	r4, r2
 181:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[6],
 723              		.loc 1 181 0 discriminator 3
 724 00a6 274A     		ldr	r2, .L30+4
 725 00a8 1288     		ldrh	r2, [r2]
 726 00aa 2749     		ldr	r1, .L30+8
 727 00ac 1201     		lsls	r2, r2, #4
 728 00ae 0A44     		add	r2, r2, r1
 729 00b0 0632     		adds	r2, r2, #6
 730 00b2 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 731              		.loc 1 172 0 discriminator 3
 732 00b4 1046     		mov	r0, r2
 182:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].data[7]);
 733              		.loc 1 182 0 discriminator 3
 734 00b6 234A     		ldr	r2, .L30+4
 735 00b8 1288     		ldrh	r2, [r2]
 736 00ba 2349     		ldr	r1, .L30+8
 737 00bc 1201     		lsls	r2, r2, #4
 738 00be 0A44     		add	r2, r2, r1
 739 00c0 0732     		adds	r2, r2, #7
 740 00c2 D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 172:sd_manager.c  **** 			(unsigned)sd_queue[sd_head].id,
 741              		.loc 1 172 0 discriminator 3
 742 00c4 1146     		mov	r1, r2
 743 00c6 3A1D     		adds	r2, r7, #4
 744 00c8 CDF80080 		str	r8, [sp]
 745 00cc CDF804C0 		str	ip, [sp, #4]
 746 00d0 CDF808E0 		str	lr, [sp, #8]
 747 00d4 0396     		str	r6, [sp, #12]
 748 00d6 0495     		str	r5, [sp, #16]
 749 00d8 0594     		str	r4, [sp, #20]
 750 00da 0690     		str	r0, [sp, #24]
 751 00dc 0791     		str	r1, [sp, #28]
 752 00de 1046     		mov	r0, r2
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 18


 753 00e0 1B49     		ldr	r1, .L30+16
 754 00e2 4A46     		mov	r2, r9
 755 00e4 FFF7FEFF 		bl	sprintf
 756 00e8 0346     		mov	r3, r0
 757 00ea A7F84630 		strh	r3, [r7, #70]	@ movhi
 183:sd_manager.c  **** 
 184:sd_manager.c  **** 		FS_Write(pfile, buffer, length); // write to SD
 758              		.loc 1 184 0 discriminator 3
 759 00ee 194B     		ldr	r3, .L30+20
 760 00f0 1968     		ldr	r1, [r3]
 761 00f2 B7F94630 		ldrsh	r3, [r7, #70]
 762 00f6 3A1D     		adds	r2, r7, #4
 763 00f8 0846     		mov	r0, r1
 764 00fa 1146     		mov	r1, r2
 765 00fc 1A46     		mov	r2, r3
 766 00fe FFF7FEFF 		bl	FS_Write
 171:sd_manager.c  **** 		length = sprintf(buffer, "%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\n",
 767              		.loc 1 171 0 discriminator 3
 768 0102 104B     		ldr	r3, .L30+4
 769 0104 1B88     		ldrh	r3, [r3]
 770 0106 0133     		adds	r3, r3, #1
 771 0108 9AB2     		uxth	r2, r3
 772 010a 0E4B     		ldr	r3, .L30+4
 773 010c 1A80     		strh	r2, [r3]	@ movhi
 774              	.L28:
 171:sd_manager.c  **** 		length = sprintf(buffer, "%X,%u,%X,%X,%X,%X,%X,%X,%X,%X\n",
 775              		.loc 1 171 0 is_stmt 0 discriminator 1
 776 010e 0D4B     		ldr	r3, .L30+4
 777 0110 1A88     		ldrh	r2, [r3]
 778 0112 114B     		ldr	r3, .L30+24
 779 0114 1B88     		ldrh	r3, [r3]
 780 0116 9A42     		cmp	r2, r3
 781 0118 87D3     		bcc	.L29
 185:sd_manager.c  **** 	}
 186:sd_manager.c  **** 	FS_Sync(""); // sync to SD
 782              		.loc 1 186 0 is_stmt 1
 783 011a 1048     		ldr	r0, .L30+28
 784 011c FFF7FEFF 		bl	FS_Sync
 187:sd_manager.c  **** 	sd_head=0; sd_tail=0;
 785              		.loc 1 187 0
 786 0120 084B     		ldr	r3, .L30+4
 787 0122 0022     		movs	r2, #0
 788 0124 1A80     		strh	r2, [r3]	@ movhi
 789 0126 0C4B     		ldr	r3, .L30+24
 790 0128 0022     		movs	r2, #0
 791 012a 1A80     		strh	r2, [r3]	@ movhi
 188:sd_manager.c  ****     CyExitCriticalSection(atomic_state);               // END ATOMIC
 792              		.loc 1 188 0
 793 012c 97F84530 		ldrb	r3, [r7, #69]	@ zero_extendqisi2
 794 0130 1846     		mov	r0, r3
 795 0132 FFF7FEFF 		bl	CyExitCriticalSection
 796              	.L25:
 189:sd_manager.c  **** } // sd_write()
 797              		.loc 1 189 0
 798 0136 4C37     		adds	r7, r7, #76
 799              		.cfi_def_cfa_offset 28
 800 0138 BD46     		mov	sp, r7
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 19


 801              		.cfi_def_cfa_register 13
 802              		@ sp needed
 803 013a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 804              	.L31:
 805 013e 00BF     		.align	2
 806              	.L30:
 807 0140 00000000 		.word	sd_ok
 808 0144 00000000 		.word	sd_head
 809 0148 00000000 		.word	sd_queue
 810 014c 002E9302 		.word	43200000
 811 0150 78000000 		.word	.LC7
 812 0154 00000000 		.word	pfile
 813 0158 00000000 		.word	sd_tail
 814 015c 20000000 		.word	.LC1
 815              		.cfi_endproc
 816              	.LFE67:
 817              		.size	sd_write, .-sd_write
 818              		.section	.rodata
 819 0097 00       		.align	2
 820              	.LC8:
 821 0098 66696C65 		.ascii	"filenamehere\000"
 821      6E616D65 
 821      68657265 
 821      00
 822              		.section	.text.sd_read,"ax",%progbits
 823              		.align	2
 824              		.global	sd_read
 825              		.thumb
 826              		.thumb_func
 827              		.type	sd_read, %function
 828              	sd_read:
 829              	.LFB68:
 190:sd_manager.c  **** 
 191:sd_manager.c  **** 
 192:sd_manager.c  **** void sd_read() {
 830              		.loc 1 192 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 64
 833              		@ frame_needed = 1, uses_anonymous_args = 0
 834 0000 80B5     		push	{r7, lr}
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 90B0     		sub	sp, sp, #64
 839              		.cfi_def_cfa_offset 72
 840 0004 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 193:sd_manager.c  **** 	if((pfile = FS_FOpen("filenamehere", "r"))) {	//open file for reading
 842              		.loc 1 193 0
 843 0006 0D48     		ldr	r0, .L34
 844 0008 0D49     		ldr	r1, .L34+4
 845 000a FFF7FEFF 		bl	FS_FOpen
 846 000e 0246     		mov	r2, r0
 847 0010 0C4B     		ldr	r3, .L34+8
 848 0012 1A60     		str	r2, [r3]
 849 0014 0B4B     		ldr	r3, .L34+8
 850 0016 1B68     		ldr	r3, [r3]
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 20


 851 0018 002B     		cmp	r3, #0
 852 001a 0CD0     		beq	.L32
 853              	.LBB4:
 194:sd_manager.c  **** 		char buffer[64];
 195:sd_manager.c  **** 		//Time time;
 196:sd_manager.c  **** 		//DataPacket msg;
 197:sd_manager.c  **** 		FS_Read(pfile, buffer, 64); // read entire file
 854              		.loc 1 197 0
 855 001c 094B     		ldr	r3, .L34+8
 856 001e 1A68     		ldr	r2, [r3]
 857 0020 3B46     		mov	r3, r7
 858 0022 1046     		mov	r0, r2
 859 0024 1946     		mov	r1, r3
 860 0026 4022     		movs	r2, #64
 861 0028 FFF7FEFF 		bl	FS_Read
 198:sd_manager.c  **** 		FS_FClose(pfile);
 862              		.loc 1 198 0
 863 002c 054B     		ldr	r3, .L34+8
 864 002e 1B68     		ldr	r3, [r3]
 865 0030 1846     		mov	r0, r3
 866 0032 FFF7FEFF 		bl	FS_FClose
 867              	.L32:
 868              	.LBE4:
 199:sd_manager.c  **** 	}
 200:sd_manager.c  **** }
 869              		.loc 1 200 0
 870 0036 4037     		adds	r7, r7, #64
 871              		.cfi_def_cfa_offset 8
 872 0038 BD46     		mov	sp, r7
 873              		.cfi_def_cfa_register 13
 874              		@ sp needed
 875 003a 80BD     		pop	{r7, pc}
 876              	.L35:
 877              		.align	2
 878              	.L34:
 879 003c 98000000 		.word	.LC8
 880 0040 1C000000 		.word	.LC0
 881 0044 00000000 		.word	pfile
 882              		.cfi_endproc
 883              	.LFE68:
 884              		.size	sd_read, .-sd_read
 885              		.section	.text.sd_buffer,"ax",%progbits
 886              		.align	2
 887              		.global	sd_buffer
 888              		.thumb
 889              		.thumb_func
 890              		.type	sd_buffer, %function
 891              	sd_buffer:
 892              	.LFB69:
 201:sd_manager.c  **** 
 202:sd_manager.c  **** 
 203:sd_manager.c  **** void sd_buffer(DataPacket * msg) {
 893              		.loc 1 203 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 8
 896              		@ frame_needed = 1, uses_anonymous_args = 0
 897              		@ link register save eliminated.
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 21


 898 0000 90B4     		push	{r4, r7}
 899              		.cfi_def_cfa_offset 8
 900              		.cfi_offset 4, -8
 901              		.cfi_offset 7, -4
 902 0002 82B0     		sub	sp, sp, #8
 903              		.cfi_def_cfa_offset 16
 904 0004 00AF     		add	r7, sp, #0
 905              		.cfi_def_cfa_register 7
 906 0006 7860     		str	r0, [r7, #4]
 204:sd_manager.c  **** 	sd_queue[sd_tail] = *msg;
 907              		.loc 1 204 0
 908 0008 0F4B     		ldr	r3, .L39
 909 000a 1B88     		ldrh	r3, [r3]
 910 000c 0F4A     		ldr	r2, .L39+4
 911 000e 1B01     		lsls	r3, r3, #4
 912 0010 1A44     		add	r2, r2, r3
 913 0012 7B68     		ldr	r3, [r7, #4]
 914 0014 1446     		mov	r4, r2
 915 0016 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 916 0018 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 205:sd_manager.c  **** 	if (sd_tail == SD_QUEUE_LENGTH-1)	//if buffer full stay at tail
 917              		.loc 1 205 0
 918 001c 0A4B     		ldr	r3, .L39
 919 001e 1B88     		ldrh	r3, [r3]
 920 0020 40F2FF32 		movw	r2, #1023
 921 0024 9342     		cmp	r3, r2
 922 0026 04D1     		bne	.L37
 206:sd_manager.c  **** 		sd_tail = sd_tail;
 923              		.loc 1 206 0
 924 0028 074B     		ldr	r3, .L39
 925 002a 1A88     		ldrh	r2, [r3]
 926 002c 064B     		ldr	r3, .L39
 927 002e 1A80     		strh	r2, [r3]	@ movhi
 928 0030 05E0     		b	.L36
 929              	.L37:
 207:sd_manager.c  **** 	else
 208:sd_manager.c  **** 		sd_tail++;	
 930              		.loc 1 208 0
 931 0032 054B     		ldr	r3, .L39
 932 0034 1B88     		ldrh	r3, [r3]
 933 0036 0133     		adds	r3, r3, #1
 934 0038 9AB2     		uxth	r2, r3
 935 003a 034B     		ldr	r3, .L39
 936 003c 1A80     		strh	r2, [r3]	@ movhi
 937              	.L36:
 209:sd_manager.c  **** }
 938              		.loc 1 209 0
 939 003e 0837     		adds	r7, r7, #8
 940              		.cfi_def_cfa_offset 8
 941 0040 BD46     		mov	sp, r7
 942              		.cfi_def_cfa_register 13
 943              		@ sp needed
 944 0042 90BC     		pop	{r4, r7}
 945              		.cfi_restore 7
 946              		.cfi_restore 4
 947              		.cfi_def_cfa_offset 0
 948 0044 7047     		bx	lr
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 22


 949              	.L40:
 950 0046 00BF     		.align	2
 951              	.L39:
 952 0048 00000000 		.word	sd_tail
 953 004c 00000000 		.word	sd_queue
 954              		.cfi_endproc
 955              	.LFE69:
 956              		.size	sd_buffer, .-sd_buffer
 957              		.section	.text.sd_stop,"ax",%progbits
 958              		.align	2
 959              		.global	sd_stop
 960              		.thumb
 961              		.thumb_func
 962              		.type	sd_stop, %function
 963              	sd_stop:
 964              	.LFB70:
 210:sd_manager.c  **** 
 211:sd_manager.c  **** /* sd_stop()
 212:sd_manager.c  **** 	Takes and returns nothing.
 213:sd_manager.c  **** 	Closes the file, synchronizes, and unmounts SD card to prevent corruption.
 214:sd_manager.c  **** */
 215:sd_manager.c  **** void sd_stop(void) {
 965              		.loc 1 215 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969 0000 80B5     		push	{r7, lr}
 970              		.cfi_def_cfa_offset 8
 971              		.cfi_offset 7, -8
 972              		.cfi_offset 14, -4
 973 0002 00AF     		add	r7, sp, #0
 974              		.cfi_def_cfa_register 7
 216:sd_manager.c  **** 	sd_write();
 975              		.loc 1 216 0
 976 0004 FFF7FEFF 		bl	sd_write
 217:sd_manager.c  **** 	FS_FClose(pfile);
 977              		.loc 1 217 0
 978 0008 054B     		ldr	r3, .L42
 979 000a 1B68     		ldr	r3, [r3]
 980 000c 1846     		mov	r0, r3
 981 000e FFF7FEFF 		bl	FS_FClose
 218:sd_manager.c  **** 	FS_Sync("");
 982              		.loc 1 218 0
 983 0012 0448     		ldr	r0, .L42+4
 984 0014 FFF7FEFF 		bl	FS_Sync
 219:sd_manager.c  **** 	FS_Unmount("");
 985              		.loc 1 219 0
 986 0018 0248     		ldr	r0, .L42+4
 987 001a FFF7FEFF 		bl	FS_Unmount
 220:sd_manager.c  **** } // sd_stop()
 988              		.loc 1 220 0
 989 001e 80BD     		pop	{r7, pc}
 990              	.L43:
 991              		.align	2
 992              	.L42:
 993 0020 00000000 		.word	pfile
 994 0024 20000000 		.word	.LC1
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 23


 995              		.cfi_endproc
 996              	.LFE70:
 997              		.size	sd_stop, .-sd_stop
 998              		.section	.rodata
 999 00a5 000000   		.align	2
 1000              	.LC9:
 1001 00a8 54797065 		.ascii	"Type,Time,Value,ID\012\000"
 1001      2C54696D 
 1001      652C5661 
 1001      6C75652C 
 1001      49440A00 
 1002              		.align	2
 1003              	.LC10:
 1004 00bc 25752C25 		.ascii	"%u,%u,%llu,%u\012\000"
 1004      752C256C 
 1004      6C752C25 
 1004      750A00
 1005 00cb 00       		.section	.text.sd_writetest,"ax",%progbits
 1006              		.align	2
 1007              		.global	sd_writetest
 1008              		.thumb
 1009              		.thumb_func
 1010              		.type	sd_writetest, %function
 1011              	sd_writetest:
 1012              	.LFB71:
 221:sd_manager.c  **** 
 222:sd_manager.c  **** 
 223:sd_manager.c  **** void sd_writetest() {
 1013              		.loc 1 223 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 136
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017 0000 80B5     		push	{r7, lr}
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 1021 0002 A6B0     		sub	sp, sp, #152
 1022              		.cfi_def_cfa_offset 160
 1023 0004 04AF     		add	r7, sp, #16
 1024              		.cfi_def_cfa 7, 144
 224:sd_manager.c  **** 	// test data writing
 225:sd_manager.c  **** 	char buffer[128];
 226:sd_manager.c  **** 	short length = 0;
 1025              		.loc 1 226 0
 1026 0006 0023     		movs	r3, #0
 1027 0008 A7F88630 		strh	r3, [r7, #134]	@ movhi
 227:sd_manager.c  **** 
 228:sd_manager.c  **** 	// test write
 229:sd_manager.c  **** 	FS_Write(pfile, "Type,Time,Value,ID\n", 19);
 1028              		.loc 1 229 0
 1029 000c 164B     		ldr	r3, .L45
 1030 000e 1B68     		ldr	r3, [r3]
 1031 0010 1846     		mov	r0, r3
 1032 0012 1649     		ldr	r1, .L45+4
 1033 0014 1322     		movs	r2, #19
 1034 0016 FFF7FEFF 		bl	FS_Write
 230:sd_manager.c  **** 	length = sprintf(buffer, "%u,%u,%llu,%u\n",
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 24


 1035              		.loc 1 230 0
 1036 001a 391D     		adds	r1, r7, #4
 1037 001c 4FF0FF32 		mov	r2, #-1
 1038 0020 4FF0FF33 		mov	r3, #-1
 1039 0024 CDE90023 		strd	r2, [sp]
 1040 0028 40F20523 		movw	r3, #517
 1041 002c 0293     		str	r3, [sp, #8]
 1042 002e 0846     		mov	r0, r1
 1043 0030 0F49     		ldr	r1, .L45+8
 1044 0032 0122     		movs	r2, #1
 1045 0034 4FF0FF33 		mov	r3, #-1
 1046 0038 FFF7FEFF 		bl	sprintf
 1047 003c 0346     		mov	r3, r0
 1048 003e A7F88630 		strh	r3, [r7, #134]	@ movhi
 231:sd_manager.c  **** 		1,0xFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 517);
 232:sd_manager.c  **** 	FS_Write(pfile, buffer, length);
 1049              		.loc 1 232 0
 1050 0042 094B     		ldr	r3, .L45
 1051 0044 1968     		ldr	r1, [r3]
 1052 0046 B7F98630 		ldrsh	r3, [r7, #134]
 1053 004a 3A1D     		adds	r2, r7, #4
 1054 004c 0846     		mov	r0, r1
 1055 004e 1146     		mov	r1, r2
 1056 0050 1A46     		mov	r2, r3
 1057 0052 FFF7FEFF 		bl	FS_Write
 233:sd_manager.c  **** 
 234:sd_manager.c  **** 	sd_stop(); // for testing
 1058              		.loc 1 234 0
 1059 0056 FFF7FEFF 		bl	sd_stop
 235:sd_manager.c  **** 	sd_ok = 0; // for testing
 1060              		.loc 1 235 0
 1061 005a 064B     		ldr	r3, .L45+12
 1062 005c 0022     		movs	r2, #0
 1063 005e 1A70     		strb	r2, [r3]
 236:sd_manager.c  **** }//test_push
 1064              		.loc 1 236 0
 1065 0060 8837     		adds	r7, r7, #136
 1066              		.cfi_def_cfa_offset 8
 1067 0062 BD46     		mov	sp, r7
 1068              		.cfi_def_cfa_register 13
 1069              		@ sp needed
 1070 0064 80BD     		pop	{r7, pc}
 1071              	.L46:
 1072 0066 00BF     		.align	2
 1073              	.L45:
 1074 0068 00000000 		.word	pfile
 1075 006c A8000000 		.word	.LC9
 1076 0070 BC000000 		.word	.LC10
 1077 0074 00000000 		.word	sd_ok
 1078              		.cfi_endproc
 1079              	.LFE71:
 1080              		.size	sd_writetest, .-sd_writetest
 1081              		.text
 1082              	.Letext0:
 1083              		.file 2 "d:\\programming\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm-n
 1084              		.file 3 "d:\\programming\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm-n
 1085              		.file 4 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 25


 1086              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS.h"
 1087              		.file 6 "data.h"
 1088              		.file 7 "time_manager.h"
 1089              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 1090              		.section	.debug_info,"",%progbits
 1091              	.Ldebug_info0:
 1092 0000 00050000 		.4byte	0x500
 1093 0004 0400     		.2byte	0x4
 1094 0006 00000000 		.4byte	.Ldebug_abbrev0
 1095 000a 04       		.byte	0x4
 1096 000b 01       		.uleb128 0x1
 1097 000c FB010000 		.4byte	.LASF66
 1098 0010 01       		.byte	0x1
 1099 0011 E0020000 		.4byte	.LASF67
 1100 0015 9C020000 		.4byte	.LASF68
 1101 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1102 001d 00000000 		.4byte	0
 1103 0021 00000000 		.4byte	.Ldebug_line0
 1104 0025 02       		.uleb128 0x2
 1105 0026 01       		.byte	0x1
 1106 0027 06       		.byte	0x6
 1107 0028 5C010000 		.4byte	.LASF0
 1108 002c 03       		.uleb128 0x3
 1109 002d 21010000 		.4byte	.LASF3
 1110 0031 02       		.byte	0x2
 1111 0032 1D       		.byte	0x1d
 1112 0033 37000000 		.4byte	0x37
 1113 0037 02       		.uleb128 0x2
 1114 0038 01       		.byte	0x1
 1115 0039 08       		.byte	0x8
 1116 003a 3C010000 		.4byte	.LASF1
 1117 003e 02       		.uleb128 0x2
 1118 003f 02       		.byte	0x2
 1119 0040 05       		.byte	0x5
 1120 0041 3A000000 		.4byte	.LASF2
 1121 0045 03       		.uleb128 0x3
 1122 0046 81000000 		.4byte	.LASF4
 1123 004a 02       		.byte	0x2
 1124 004b 2B       		.byte	0x2b
 1125 004c 50000000 		.4byte	0x50
 1126 0050 02       		.uleb128 0x2
 1127 0051 02       		.byte	0x2
 1128 0052 07       		.byte	0x7
 1129 0053 BC010000 		.4byte	.LASF5
 1130 0057 03       		.uleb128 0x3
 1131 0058 10030000 		.4byte	.LASF6
 1132 005c 02       		.byte	0x2
 1133 005d 3F       		.byte	0x3f
 1134 005e 62000000 		.4byte	0x62
 1135 0062 02       		.uleb128 0x2
 1136 0063 04       		.byte	0x4
 1137 0064 05       		.byte	0x5
 1138 0065 D9010000 		.4byte	.LASF7
 1139 0069 03       		.uleb128 0x3
 1140 006a 6E000000 		.4byte	.LASF8
 1141 006e 02       		.byte	0x2
 1142 006f 41       		.byte	0x41
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 26


 1143 0070 74000000 		.4byte	0x74
 1144 0074 02       		.uleb128 0x2
 1145 0075 04       		.byte	0x4
 1146 0076 07       		.byte	0x7
 1147 0077 A5010000 		.4byte	.LASF9
 1148 007b 02       		.uleb128 0x2
 1149 007c 08       		.byte	0x8
 1150 007d 05       		.byte	0x5
 1151 007e F4000000 		.4byte	.LASF10
 1152 0082 02       		.uleb128 0x2
 1153 0083 08       		.byte	0x8
 1154 0084 07       		.byte	0x7
 1155 0085 6F010000 		.4byte	.LASF11
 1156 0089 04       		.uleb128 0x4
 1157 008a 04       		.byte	0x4
 1158 008b 05       		.byte	0x5
 1159 008c 696E7400 		.ascii	"int\000"
 1160 0090 02       		.uleb128 0x2
 1161 0091 04       		.byte	0x4
 1162 0092 07       		.byte	0x7
 1163 0093 8F010000 		.4byte	.LASF12
 1164 0097 03       		.uleb128 0x3
 1165 0098 AE000000 		.4byte	.LASF13
 1166 009c 03       		.byte	0x3
 1167 009d 15       		.byte	0x15
 1168 009e 2C000000 		.4byte	0x2c
 1169 00a2 03       		.uleb128 0x3
 1170 00a3 9C010000 		.4byte	.LASF14
 1171 00a7 03       		.byte	0x3
 1172 00a8 21       		.byte	0x21
 1173 00a9 45000000 		.4byte	0x45
 1174 00ad 03       		.uleb128 0x3
 1175 00ae E2010000 		.4byte	.LASF15
 1176 00b2 03       		.byte	0x3
 1177 00b3 2C       		.byte	0x2c
 1178 00b4 57000000 		.4byte	0x57
 1179 00b8 03       		.uleb128 0x3
 1180 00b9 86010000 		.4byte	.LASF16
 1181 00bd 03       		.byte	0x3
 1182 00be 2D       		.byte	0x2d
 1183 00bf 69000000 		.4byte	0x69
 1184 00c3 02       		.uleb128 0x2
 1185 00c4 04       		.byte	0x4
 1186 00c5 04       		.byte	0x4
 1187 00c6 DC000000 		.4byte	.LASF17
 1188 00ca 02       		.uleb128 0x2
 1189 00cb 08       		.byte	0x8
 1190 00cc 04       		.byte	0x4
 1191 00cd F5020000 		.4byte	.LASF18
 1192 00d1 02       		.uleb128 0x2
 1193 00d2 01       		.byte	0x1
 1194 00d3 08       		.byte	0x8
 1195 00d4 D4010000 		.4byte	.LASF19
 1196 00d8 02       		.uleb128 0x2
 1197 00d9 04       		.byte	0x4
 1198 00da 07       		.byte	0x7
 1199 00db 2F030000 		.4byte	.LASF20
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 27


 1200 00df 05       		.uleb128 0x5
 1201 00e0 04       		.byte	0x4
 1202 00e1 D1000000 		.4byte	0xd1
 1203 00e5 03       		.uleb128 0x3
 1204 00e6 54010000 		.4byte	.LASF21
 1205 00ea 04       		.byte	0x4
 1206 00eb 7E       		.byte	0x7e
 1207 00ec F0000000 		.4byte	0xf0
 1208 00f0 06       		.uleb128 0x6
 1209 00f1 54010000 		.4byte	.LASF21
 1210 00f5 07       		.uleb128 0x7
 1211 00f6 0C       		.byte	0xc
 1212 00f7 05       		.byte	0x5
 1213 00f8 FD       		.byte	0xfd
 1214 00f9 4A010000 		.4byte	0x14a
 1215 00fd 08       		.uleb128 0x8
 1216 00fe 1C010000 		.4byte	.LASF22
 1217 0102 05       		.byte	0x5
 1218 0103 FE       		.byte	0xfe
 1219 0104 50000000 		.4byte	0x50
 1220 0108 00       		.byte	0
 1221 0109 08       		.uleb128 0x8
 1222 010a 5A030000 		.4byte	.LASF23
 1223 010e 05       		.byte	0x5
 1224 010f FF       		.byte	0xff
 1225 0110 50000000 		.4byte	0x50
 1226 0114 02       		.byte	0x2
 1227 0115 09       		.uleb128 0x9
 1228 0116 44617900 		.ascii	"Day\000"
 1229 011a 05       		.byte	0x5
 1230 011b 0001     		.2byte	0x100
 1231 011d 50000000 		.4byte	0x50
 1232 0121 04       		.byte	0x4
 1233 0122 0A       		.uleb128 0xa
 1234 0123 CF010000 		.4byte	.LASF24
 1235 0127 05       		.byte	0x5
 1236 0128 0101     		.2byte	0x101
 1237 012a 50000000 		.4byte	0x50
 1238 012e 06       		.byte	0x6
 1239 012f 0A       		.uleb128 0xa
 1240 0130 60030000 		.4byte	.LASF25
 1241 0134 05       		.byte	0x5
 1242 0135 0201     		.2byte	0x102
 1243 0137 50000000 		.4byte	0x50
 1244 013b 08       		.byte	0x8
 1245 013c 0A       		.uleb128 0xa
 1246 013d D9020000 		.4byte	.LASF26
 1247 0141 05       		.byte	0x5
 1248 0142 0301     		.2byte	0x103
 1249 0144 50000000 		.4byte	0x50
 1250 0148 0A       		.byte	0xa
 1251 0149 00       		.byte	0
 1252 014a 0B       		.uleb128 0xb
 1253 014b 59000000 		.4byte	.LASF27
 1254 014f 05       		.byte	0x5
 1255 0150 0401     		.2byte	0x104
 1256 0152 F5000000 		.4byte	0xf5
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 28


 1257 0156 0C       		.uleb128 0xc
 1258 0157 01       		.byte	0x1
 1259 0158 05       		.byte	0x5
 1260 0159 0601     		.2byte	0x106
 1261 015b 72010000 		.4byte	0x172
 1262 015f 0D       		.uleb128 0xd
 1263 0160 E2000000 		.4byte	.LASF28
 1264 0164 00       		.sleb128 0
 1265 0165 0D       		.uleb128 0xd
 1266 0166 FC020000 		.4byte	.LASF29
 1267 016a 01       		.sleb128 1
 1268 016b 0D       		.uleb128 0xd
 1269 016c 08000000 		.4byte	.LASF30
 1270 0170 02       		.sleb128 2
 1271 0171 00       		.byte	0
 1272 0172 05       		.uleb128 0x5
 1273 0173 04       		.byte	0x4
 1274 0174 E5000000 		.4byte	0xe5
 1275 0178 07       		.uleb128 0x7
 1276 0179 10       		.byte	0x10
 1277 017a 06       		.byte	0x6
 1278 017b 0A       		.byte	0xa
 1279 017c B0010000 		.4byte	0x1b0
 1280 0180 08       		.uleb128 0x8
 1281 0181 A1000000 		.4byte	.LASF31
 1282 0185 06       		.byte	0x6
 1283 0186 0B       		.byte	0xb
 1284 0187 B8000000 		.4byte	0xb8
 1285 018b 00       		.byte	0
 1286 018c 0E       		.uleb128 0xe
 1287 018d 696400   		.ascii	"id\000"
 1288 0190 06       		.byte	0x6
 1289 0191 0C       		.byte	0xc
 1290 0192 A2000000 		.4byte	0xa2
 1291 0196 04       		.byte	0x4
 1292 0197 08       		.uleb128 0x8
 1293 0198 35010000 		.4byte	.LASF32
 1294 019c 06       		.byte	0x6
 1295 019d 0D       		.byte	0xd
 1296 019e 97000000 		.4byte	0x97
 1297 01a2 06       		.byte	0x6
 1298 01a3 08       		.uleb128 0x8
 1299 01a4 89020000 		.4byte	.LASF33
 1300 01a8 06       		.byte	0x6
 1301 01a9 0E       		.byte	0xe
 1302 01aa B0010000 		.4byte	0x1b0
 1303 01ae 07       		.byte	0x7
 1304 01af 00       		.byte	0
 1305 01b0 0F       		.uleb128 0xf
 1306 01b1 97000000 		.4byte	0x97
 1307 01b5 C0010000 		.4byte	0x1c0
 1308 01b9 10       		.uleb128 0x10
 1309 01ba D8000000 		.4byte	0xd8
 1310 01be 07       		.byte	0x7
 1311 01bf 00       		.byte	0
 1312 01c0 03       		.uleb128 0x3
 1313 01c1 F0010000 		.4byte	.LASF34
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 29


 1314 01c5 06       		.byte	0x6
 1315 01c6 0F       		.byte	0xf
 1316 01c7 78010000 		.4byte	0x178
 1317 01cb 07       		.uleb128 0x7
 1318 01cc 10       		.byte	0x10
 1319 01cd 07       		.byte	0x7
 1320 01ce 12       		.byte	0x12
 1321 01cf 28020000 		.4byte	0x228
 1322 01d3 08       		.uleb128 0x8
 1323 01d4 EA010000 		.4byte	.LASF35
 1324 01d8 07       		.byte	0x7
 1325 01d9 13       		.byte	0x13
 1326 01da 97000000 		.4byte	0x97
 1327 01de 00       		.byte	0
 1328 01df 0E       		.uleb128 0xe
 1329 01e0 64617900 		.ascii	"day\000"
 1330 01e4 07       		.byte	0x7
 1331 01e5 13       		.byte	0x13
 1332 01e6 97000000 		.4byte	0x97
 1333 01ea 01       		.byte	0x1
 1334 01eb 08       		.uleb128 0x8
 1335 01ec 30010000 		.4byte	.LASF36
 1336 01f0 07       		.byte	0x7
 1337 01f1 13       		.byte	0x13
 1338 01f2 97000000 		.4byte	0x97
 1339 01f6 02       		.byte	0x2
 1340 01f7 08       		.uleb128 0x8
 1341 01f8 95020000 		.4byte	.LASF37
 1342 01fc 07       		.byte	0x7
 1343 01fd 13       		.byte	0x13
 1344 01fe 97000000 		.4byte	0x97
 1345 0202 03       		.byte	0x3
 1346 0203 08       		.uleb128 0x8
 1347 0204 68010000 		.4byte	.LASF38
 1348 0208 07       		.byte	0x7
 1349 0209 13       		.byte	0x13
 1350 020a 97000000 		.4byte	0x97
 1351 020e 04       		.byte	0x4
 1352 020f 08       		.uleb128 0x8
 1353 0210 A1000000 		.4byte	.LASF31
 1354 0214 07       		.byte	0x7
 1355 0215 14       		.byte	0x14
 1356 0216 B8000000 		.4byte	0xb8
 1357 021a 08       		.byte	0x8
 1358 021b 08       		.uleb128 0x8
 1359 021c 9C000000 		.4byte	.LASF39
 1360 0220 07       		.byte	0x7
 1361 0221 15       		.byte	0x15
 1362 0222 A2000000 		.4byte	0xa2
 1363 0226 0C       		.byte	0xc
 1364 0227 00       		.byte	0
 1365 0228 03       		.uleb128 0x3
 1366 0229 2B010000 		.4byte	.LASF40
 1367 022d 07       		.byte	0x7
 1368 022e 16       		.byte	0x16
 1369 022f CB010000 		.4byte	0x1cb
 1370 0233 11       		.uleb128 0x11
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 30


 1371 0234 8C000000 		.4byte	.LASF41
 1372 0238 01       		.byte	0x1
 1373 0239 0E       		.byte	0xe
 1374 023a 00000000 		.4byte	.LFB63
 1375 023e 1C000000 		.4byte	.LFE63-.LFB63
 1376 0242 01       		.uleb128 0x1
 1377 0243 9C       		.byte	0x9c
 1378 0244 11       		.uleb128 0x11
 1379 0245 40030000 		.4byte	.LASF42
 1380 0249 01       		.byte	0x1
 1381 024a 17       		.byte	0x17
 1382 024b 00000000 		.4byte	.LFB64
 1383 024f 0A000000 		.4byte	.LFE64-.LFB64
 1384 0253 01       		.uleb128 0x1
 1385 0254 9C       		.byte	0x9c
 1386 0255 12       		.uleb128 0x12
 1387 0256 00000000 		.4byte	.LASF47
 1388 025a 01       		.byte	0x1
 1389 025b 27       		.byte	0x27
 1390 025c 00000000 		.4byte	.LFB65
 1391 0260 A8010000 		.4byte	.LFE65-.LFB65
 1392 0264 01       		.uleb128 0x1
 1393 0265 9C       		.byte	0x9c
 1394 0266 CA020000 		.4byte	0x2ca
 1395 026a 13       		.uleb128 0x13
 1396 026b B7010000 		.4byte	.LASF49
 1397 026f 01       		.byte	0x1
 1398 0270 27       		.byte	0x27
 1399 0271 28020000 		.4byte	0x228
 1400 0275 03       		.uleb128 0x3
 1401 0276 91       		.byte	0x91
 1402 0277 E87E     		.sleb128 -152
 1403 0279 14       		.uleb128 0x14
 1404 027a 1A000000 		.4byte	.LASF43
 1405 027e 01       		.byte	0x1
 1406 027f 34       		.byte	0x34
 1407 0280 CA020000 		.4byte	0x2ca
 1408 0284 02       		.uleb128 0x2
 1409 0285 91       		.byte	0x91
 1410 0286 48       		.sleb128 -56
 1411 0287 14       		.uleb128 0x14
 1412 0288 50000000 		.4byte	.LASF44
 1413 028c 01       		.byte	0x1
 1414 028d 34       		.byte	0x34
 1415 028e DA020000 		.4byte	0x2da
 1416 0292 03       		.uleb128 0x3
 1417 0293 91       		.byte	0x91
 1418 0294 887F     		.sleb128 -120
 1419 0296 15       		.uleb128 0x15
 1420 0297 02010000 		.4byte	.LASF69
 1421 029b 01       		.byte	0x1
 1422 029c 35       		.byte	0x35
 1423 029d B8000000 		.4byte	0xb8
 1424 02a1 16       		.uleb128 0x16
 1425 02a2 3E000000 		.4byte	.LBB2
 1426 02a6 30010000 		.4byte	.LBE2-.LBB2
 1427 02aa 14       		.uleb128 0x14
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 31


 1428 02ab 4A010000 		.4byte	.LASF45
 1429 02af 01       		.byte	0x1
 1430 02b0 59       		.byte	0x59
 1431 02b1 4A010000 		.4byte	0x14a
 1432 02b5 03       		.uleb128 0x3
 1433 02b6 91       		.byte	0x91
 1434 02b7 FC7E     		.sleb128 -132
 1435 02b9 14       		.uleb128 0x14
 1436 02ba B6000000 		.4byte	.LASF46
 1437 02be 01       		.byte	0x1
 1438 02bf 5A       		.byte	0x5a
 1439 02c0 74000000 		.4byte	0x74
 1440 02c4 03       		.uleb128 0x3
 1441 02c5 91       		.byte	0x91
 1442 02c6 F87E     		.sleb128 -136
 1443 02c8 00       		.byte	0
 1444 02c9 00       		.byte	0
 1445 02ca 0F       		.uleb128 0xf
 1446 02cb D1000000 		.4byte	0xd1
 1447 02cf DA020000 		.4byte	0x2da
 1448 02d3 10       		.uleb128 0x10
 1449 02d4 D8000000 		.4byte	0xd8
 1450 02d8 1F       		.byte	0x1f
 1451 02d9 00       		.byte	0
 1452 02da 0F       		.uleb128 0xf
 1453 02db D1000000 		.4byte	0xd1
 1454 02df EA020000 		.4byte	0x2ea
 1455 02e3 10       		.uleb128 0x10
 1456 02e4 D8000000 		.4byte	0xd8
 1457 02e8 3F       		.byte	0x3f
 1458 02e9 00       		.byte	0
 1459 02ea 12       		.uleb128 0x12
 1460 02eb 08010000 		.4byte	.LASF48
 1461 02ef 01       		.byte	0x1
 1462 02f0 75       		.byte	0x75
 1463 02f1 00000000 		.4byte	.LFB66
 1464 02f5 90010000 		.4byte	.LFE66-.LFB66
 1465 02f9 01       		.uleb128 0x1
 1466 02fa 9C       		.byte	0x9c
 1467 02fb 52030000 		.4byte	0x352
 1468 02ff 13       		.uleb128 0x13
 1469 0300 B7010000 		.4byte	.LASF49
 1470 0304 01       		.byte	0x1
 1471 0305 75       		.byte	0x75
 1472 0306 28020000 		.4byte	0x228
 1473 030a 03       		.uleb128 0x3
 1474 030b 91       		.byte	0x91
 1475 030c 887F     		.sleb128 -120
 1476 030e 16       		.uleb128 0x16
 1477 030f 24000000 		.4byte	.LBB3
 1478 0313 52010000 		.4byte	.LBE3-.LBB3
 1479 0317 14       		.uleb128 0x14
 1480 0318 8E020000 		.4byte	.LASF50
 1481 031c 01       		.byte	0x1
 1482 031d 77       		.byte	0x77
 1483 031e DA020000 		.4byte	0x2da
 1484 0322 03       		.uleb128 0x3
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 32


 1485 0323 91       		.byte	0x91
 1486 0324 987F     		.sleb128 -104
 1487 0326 17       		.uleb128 0x17
 1488 0327 70747200 		.ascii	"ptr\000"
 1489 032b 01       		.byte	0x1
 1490 032c 78       		.byte	0x78
 1491 032d DF000000 		.4byte	0xdf
 1492 0331 02       		.uleb128 0x2
 1493 0332 91       		.byte	0x91
 1494 0333 6C       		.sleb128 -20
 1495 0334 17       		.uleb128 0x17
 1496 0335 6E756D00 		.ascii	"num\000"
 1497 0339 01       		.byte	0x1
 1498 033a 79       		.byte	0x79
 1499 033b A2000000 		.4byte	0xa2
 1500 033f 02       		.uleb128 0x2
 1501 0340 91       		.byte	0x91
 1502 0341 6A       		.sleb128 -22
 1503 0342 14       		.uleb128 0x14
 1504 0343 65000000 		.4byte	.LASF51
 1505 0347 01       		.byte	0x1
 1506 0348 7A       		.byte	0x7a
 1507 0349 28020000 		.4byte	0x228
 1508 034d 02       		.uleb128 0x2
 1509 034e 91       		.byte	0x91
 1510 034f 58       		.sleb128 -40
 1511 0350 00       		.byte	0
 1512 0351 00       		.byte	0
 1513 0352 18       		.uleb128 0x18
 1514 0353 D3000000 		.4byte	.LASF53
 1515 0357 01       		.byte	0x1
 1516 0358 A4       		.byte	0xa4
 1517 0359 00000000 		.4byte	.LFB67
 1518 035d 60010000 		.4byte	.LFE67-.LFB67
 1519 0361 01       		.uleb128 0x1
 1520 0362 9C       		.byte	0x9c
 1521 0363 93030000 		.4byte	0x393
 1522 0367 14       		.uleb128 0x14
 1523 0368 8E020000 		.4byte	.LASF50
 1524 036c 01       		.byte	0x1
 1525 036d A7       		.byte	0xa7
 1526 036e DA020000 		.4byte	0x2da
 1527 0372 03       		.uleb128 0x3
 1528 0373 91       		.byte	0x91
 1529 0374 9C7F     		.sleb128 -100
 1530 0376 14       		.uleb128 0x14
 1531 0377 35010000 		.4byte	.LASF32
 1532 037b 01       		.byte	0x1
 1533 037c A8       		.byte	0xa8
 1534 037d 3E000000 		.4byte	0x3e
 1535 0381 02       		.uleb128 0x2
 1536 0382 91       		.byte	0x91
 1537 0383 5E       		.sleb128 -34
 1538 0384 14       		.uleb128 0x14
 1539 0385 2D000000 		.4byte	.LASF52
 1540 0389 01       		.byte	0x1
 1541 038a AA       		.byte	0xaa
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 33


 1542 038b 97000000 		.4byte	0x97
 1543 038f 02       		.uleb128 0x2
 1544 0390 91       		.byte	0x91
 1545 0391 5D       		.sleb128 -35
 1546 0392 00       		.byte	0
 1547 0393 18       		.uleb128 0x18
 1548 0394 79000000 		.4byte	.LASF54
 1549 0398 01       		.byte	0x1
 1550 0399 C0       		.byte	0xc0
 1551 039a 00000000 		.4byte	.LFB68
 1552 039e 48000000 		.4byte	.LFE68-.LFB68
 1553 03a2 01       		.uleb128 0x1
 1554 03a3 9C       		.byte	0x9c
 1555 03a4 C2030000 		.4byte	0x3c2
 1556 03a8 16       		.uleb128 0x16
 1557 03a9 1C000000 		.4byte	.LBB4
 1558 03ad 1A000000 		.4byte	.LBE4-.LBB4
 1559 03b1 14       		.uleb128 0x14
 1560 03b2 8E020000 		.4byte	.LASF50
 1561 03b6 01       		.byte	0x1
 1562 03b7 C2       		.byte	0xc2
 1563 03b8 DA020000 		.4byte	0x2da
 1564 03bc 03       		.uleb128 0x3
 1565 03bd 91       		.byte	0x91
 1566 03be B87F     		.sleb128 -72
 1567 03c0 00       		.byte	0
 1568 03c1 00       		.byte	0
 1569 03c2 19       		.uleb128 0x19
 1570 03c3 23000000 		.4byte	.LASF55
 1571 03c7 01       		.byte	0x1
 1572 03c8 CB       		.byte	0xcb
 1573 03c9 00000000 		.4byte	.LFB69
 1574 03cd 50000000 		.4byte	.LFE69-.LFB69
 1575 03d1 01       		.uleb128 0x1
 1576 03d2 9C       		.byte	0x9c
 1577 03d3 E6030000 		.4byte	0x3e6
 1578 03d7 1A       		.uleb128 0x1a
 1579 03d8 6D736700 		.ascii	"msg\000"
 1580 03dc 01       		.byte	0x1
 1581 03dd CB       		.byte	0xcb
 1582 03de E6030000 		.4byte	0x3e6
 1583 03e2 02       		.uleb128 0x2
 1584 03e3 91       		.byte	0x91
 1585 03e4 74       		.sleb128 -12
 1586 03e5 00       		.byte	0
 1587 03e6 05       		.uleb128 0x5
 1588 03e7 04       		.byte	0x4
 1589 03e8 C0010000 		.4byte	0x1c0
 1590 03ec 11       		.uleb128 0x11
 1591 03ed 38030000 		.4byte	.LASF56
 1592 03f1 01       		.byte	0x1
 1593 03f2 D7       		.byte	0xd7
 1594 03f3 00000000 		.4byte	.LFB70
 1595 03f7 28000000 		.4byte	.LFE70-.LFB70
 1596 03fb 01       		.uleb128 0x1
 1597 03fc 9C       		.byte	0x9c
 1598 03fd 18       		.uleb128 0x18
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 34


 1599 03fe 67030000 		.4byte	.LASF57
 1600 0402 01       		.byte	0x1
 1601 0403 DF       		.byte	0xdf
 1602 0404 00000000 		.4byte	.LFB71
 1603 0408 78000000 		.4byte	.LFE71-.LFB71
 1604 040c 01       		.uleb128 0x1
 1605 040d 9C       		.byte	0x9c
 1606 040e 30040000 		.4byte	0x430
 1607 0412 14       		.uleb128 0x14
 1608 0413 8E020000 		.4byte	.LASF50
 1609 0417 01       		.byte	0x1
 1610 0418 E1       		.byte	0xe1
 1611 0419 30040000 		.4byte	0x430
 1612 041d 03       		.uleb128 0x3
 1613 041e 91       		.byte	0x91
 1614 041f F47E     		.sleb128 -140
 1615 0421 14       		.uleb128 0x14
 1616 0422 35010000 		.4byte	.LASF32
 1617 0426 01       		.byte	0x1
 1618 0427 E2       		.byte	0xe2
 1619 0428 3E000000 		.4byte	0x3e
 1620 042c 02       		.uleb128 0x2
 1621 042d 91       		.byte	0x91
 1622 042e 76       		.sleb128 -10
 1623 042f 00       		.byte	0
 1624 0430 0F       		.uleb128 0xf
 1625 0431 D1000000 		.4byte	0xd1
 1626 0435 40040000 		.4byte	0x440
 1627 0439 10       		.uleb128 0x10
 1628 043a D8000000 		.4byte	0xd8
 1629 043e 7F       		.byte	0x7f
 1630 043f 00       		.byte	0
 1631 0440 1B       		.uleb128 0x1b
 1632 0441 4D030000 		.4byte	.LASF58
 1633 0445 08       		.byte	0x8
 1634 0446 9606     		.2byte	0x696
 1635 0448 4C040000 		.4byte	0x44c
 1636 044c 1C       		.uleb128 0x1c
 1637 044d AD000000 		.4byte	0xad
 1638 0451 1D       		.uleb128 0x1d
 1639 0452 1A030000 		.4byte	.LASF59
 1640 0456 01       		.byte	0x1
 1641 0457 04       		.byte	0x4
 1642 0458 72010000 		.4byte	0x172
 1643 045c 05       		.uleb128 0x5
 1644 045d 03       		.byte	0x3
 1645 045e 00000000 		.4byte	pfile
 1646 0462 1D       		.uleb128 0x1d
 1647 0463 20030000 		.4byte	.LASF60
 1648 0467 01       		.byte	0x1
 1649 0468 05       		.byte	0x5
 1650 0469 97000000 		.4byte	0x97
 1651 046d 05       		.uleb128 0x5
 1652 046e 03       		.byte	0x3
 1653 046f 00000000 		.4byte	sd_ok
 1654 0473 0F       		.uleb128 0xf
 1655 0474 D1000000 		.4byte	0xd1
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 35


 1656 0478 83040000 		.4byte	0x483
 1657 047c 10       		.uleb128 0x10
 1658 047d D8000000 		.4byte	0xd8
 1659 0481 0D       		.byte	0xd
 1660 0482 00       		.byte	0
 1661 0483 1D       		.uleb128 0x1d
 1662 0484 C5000000 		.4byte	.LASF61
 1663 0488 01       		.byte	0x1
 1664 0489 07       		.byte	0x7
 1665 048a 94040000 		.4byte	0x494
 1666 048e 05       		.uleb128 0x5
 1667 048f 03       		.byte	0x3
 1668 0490 00000000 		.4byte	set_time_file
 1669 0494 1E       		.uleb128 0x1e
 1670 0495 73040000 		.4byte	0x473
 1671 0499 0F       		.uleb128 0xf
 1672 049a D1000000 		.4byte	0xd1
 1673 049e A9040000 		.4byte	0x4a9
 1674 04a2 10       		.uleb128 0x10
 1675 04a3 D8000000 		.4byte	0xd8
 1676 04a7 0B       		.byte	0xb
 1677 04a8 00       		.byte	0
 1678 04a9 1D       		.uleb128 0x1d
 1679 04aa 44000000 		.4byte	.LASF62
 1680 04ae 01       		.byte	0x1
 1681 04af 08       		.byte	0x8
 1682 04b0 BA040000 		.4byte	0x4ba
 1683 04b4 05       		.uleb128 0x5
 1684 04b5 03       		.byte	0x3
 1685 04b6 00000000 		.4byte	format_file
 1686 04ba 1E       		.uleb128 0x1e
 1687 04bb 99040000 		.4byte	0x499
 1688 04bf 0F       		.uleb128 0xf
 1689 04c0 C0010000 		.4byte	0x1c0
 1690 04c4 D0040000 		.4byte	0x4d0
 1691 04c8 1F       		.uleb128 0x1f
 1692 04c9 D8000000 		.4byte	0xd8
 1693 04cd FF03     		.2byte	0x3ff
 1694 04cf 00       		.byte	0
 1695 04d0 1D       		.uleb128 0x1d
 1696 04d1 26030000 		.4byte	.LASF63
 1697 04d5 01       		.byte	0x1
 1698 04d6 0A       		.byte	0xa
 1699 04d7 BF040000 		.4byte	0x4bf
 1700 04db 05       		.uleb128 0x5
 1701 04dc 03       		.byte	0x3
 1702 04dd 00000000 		.4byte	sd_queue
 1703 04e1 1D       		.uleb128 0x1d
 1704 04e2 ED020000 		.4byte	.LASF64
 1705 04e6 01       		.byte	0x1
 1706 04e7 0B       		.byte	0xb
 1707 04e8 A2000000 		.4byte	0xa2
 1708 04ec 05       		.uleb128 0x5
 1709 04ed 03       		.byte	0x3
 1710 04ee 00000000 		.4byte	sd_head
 1711 04f2 1D       		.uleb128 0x1d
 1712 04f3 14010000 		.4byte	.LASF65
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 36


 1713 04f7 01       		.byte	0x1
 1714 04f8 0B       		.byte	0xb
 1715 04f9 A2000000 		.4byte	0xa2
 1716 04fd 05       		.uleb128 0x5
 1717 04fe 03       		.byte	0x3
 1718 04ff 00000000 		.4byte	sd_tail
 1719 0503 00       		.byte	0
 1720              		.section	.debug_abbrev,"",%progbits
 1721              	.Ldebug_abbrev0:
 1722 0000 01       		.uleb128 0x1
 1723 0001 11       		.uleb128 0x11
 1724 0002 01       		.byte	0x1
 1725 0003 25       		.uleb128 0x25
 1726 0004 0E       		.uleb128 0xe
 1727 0005 13       		.uleb128 0x13
 1728 0006 0B       		.uleb128 0xb
 1729 0007 03       		.uleb128 0x3
 1730 0008 0E       		.uleb128 0xe
 1731 0009 1B       		.uleb128 0x1b
 1732 000a 0E       		.uleb128 0xe
 1733 000b 55       		.uleb128 0x55
 1734 000c 17       		.uleb128 0x17
 1735 000d 11       		.uleb128 0x11
 1736 000e 01       		.uleb128 0x1
 1737 000f 10       		.uleb128 0x10
 1738 0010 17       		.uleb128 0x17
 1739 0011 00       		.byte	0
 1740 0012 00       		.byte	0
 1741 0013 02       		.uleb128 0x2
 1742 0014 24       		.uleb128 0x24
 1743 0015 00       		.byte	0
 1744 0016 0B       		.uleb128 0xb
 1745 0017 0B       		.uleb128 0xb
 1746 0018 3E       		.uleb128 0x3e
 1747 0019 0B       		.uleb128 0xb
 1748 001a 03       		.uleb128 0x3
 1749 001b 0E       		.uleb128 0xe
 1750 001c 00       		.byte	0
 1751 001d 00       		.byte	0
 1752 001e 03       		.uleb128 0x3
 1753 001f 16       		.uleb128 0x16
 1754 0020 00       		.byte	0
 1755 0021 03       		.uleb128 0x3
 1756 0022 0E       		.uleb128 0xe
 1757 0023 3A       		.uleb128 0x3a
 1758 0024 0B       		.uleb128 0xb
 1759 0025 3B       		.uleb128 0x3b
 1760 0026 0B       		.uleb128 0xb
 1761 0027 49       		.uleb128 0x49
 1762 0028 13       		.uleb128 0x13
 1763 0029 00       		.byte	0
 1764 002a 00       		.byte	0
 1765 002b 04       		.uleb128 0x4
 1766 002c 24       		.uleb128 0x24
 1767 002d 00       		.byte	0
 1768 002e 0B       		.uleb128 0xb
 1769 002f 0B       		.uleb128 0xb
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 37


 1770 0030 3E       		.uleb128 0x3e
 1771 0031 0B       		.uleb128 0xb
 1772 0032 03       		.uleb128 0x3
 1773 0033 08       		.uleb128 0x8
 1774 0034 00       		.byte	0
 1775 0035 00       		.byte	0
 1776 0036 05       		.uleb128 0x5
 1777 0037 0F       		.uleb128 0xf
 1778 0038 00       		.byte	0
 1779 0039 0B       		.uleb128 0xb
 1780 003a 0B       		.uleb128 0xb
 1781 003b 49       		.uleb128 0x49
 1782 003c 13       		.uleb128 0x13
 1783 003d 00       		.byte	0
 1784 003e 00       		.byte	0
 1785 003f 06       		.uleb128 0x6
 1786 0040 13       		.uleb128 0x13
 1787 0041 00       		.byte	0
 1788 0042 03       		.uleb128 0x3
 1789 0043 0E       		.uleb128 0xe
 1790 0044 3C       		.uleb128 0x3c
 1791 0045 19       		.uleb128 0x19
 1792 0046 00       		.byte	0
 1793 0047 00       		.byte	0
 1794 0048 07       		.uleb128 0x7
 1795 0049 13       		.uleb128 0x13
 1796 004a 01       		.byte	0x1
 1797 004b 0B       		.uleb128 0xb
 1798 004c 0B       		.uleb128 0xb
 1799 004d 3A       		.uleb128 0x3a
 1800 004e 0B       		.uleb128 0xb
 1801 004f 3B       		.uleb128 0x3b
 1802 0050 0B       		.uleb128 0xb
 1803 0051 01       		.uleb128 0x1
 1804 0052 13       		.uleb128 0x13
 1805 0053 00       		.byte	0
 1806 0054 00       		.byte	0
 1807 0055 08       		.uleb128 0x8
 1808 0056 0D       		.uleb128 0xd
 1809 0057 00       		.byte	0
 1810 0058 03       		.uleb128 0x3
 1811 0059 0E       		.uleb128 0xe
 1812 005a 3A       		.uleb128 0x3a
 1813 005b 0B       		.uleb128 0xb
 1814 005c 3B       		.uleb128 0x3b
 1815 005d 0B       		.uleb128 0xb
 1816 005e 49       		.uleb128 0x49
 1817 005f 13       		.uleb128 0x13
 1818 0060 38       		.uleb128 0x38
 1819 0061 0B       		.uleb128 0xb
 1820 0062 00       		.byte	0
 1821 0063 00       		.byte	0
 1822 0064 09       		.uleb128 0x9
 1823 0065 0D       		.uleb128 0xd
 1824 0066 00       		.byte	0
 1825 0067 03       		.uleb128 0x3
 1826 0068 08       		.uleb128 0x8
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 38


 1827 0069 3A       		.uleb128 0x3a
 1828 006a 0B       		.uleb128 0xb
 1829 006b 3B       		.uleb128 0x3b
 1830 006c 05       		.uleb128 0x5
 1831 006d 49       		.uleb128 0x49
 1832 006e 13       		.uleb128 0x13
 1833 006f 38       		.uleb128 0x38
 1834 0070 0B       		.uleb128 0xb
 1835 0071 00       		.byte	0
 1836 0072 00       		.byte	0
 1837 0073 0A       		.uleb128 0xa
 1838 0074 0D       		.uleb128 0xd
 1839 0075 00       		.byte	0
 1840 0076 03       		.uleb128 0x3
 1841 0077 0E       		.uleb128 0xe
 1842 0078 3A       		.uleb128 0x3a
 1843 0079 0B       		.uleb128 0xb
 1844 007a 3B       		.uleb128 0x3b
 1845 007b 05       		.uleb128 0x5
 1846 007c 49       		.uleb128 0x49
 1847 007d 13       		.uleb128 0x13
 1848 007e 38       		.uleb128 0x38
 1849 007f 0B       		.uleb128 0xb
 1850 0080 00       		.byte	0
 1851 0081 00       		.byte	0
 1852 0082 0B       		.uleb128 0xb
 1853 0083 16       		.uleb128 0x16
 1854 0084 00       		.byte	0
 1855 0085 03       		.uleb128 0x3
 1856 0086 0E       		.uleb128 0xe
 1857 0087 3A       		.uleb128 0x3a
 1858 0088 0B       		.uleb128 0xb
 1859 0089 3B       		.uleb128 0x3b
 1860 008a 05       		.uleb128 0x5
 1861 008b 49       		.uleb128 0x49
 1862 008c 13       		.uleb128 0x13
 1863 008d 00       		.byte	0
 1864 008e 00       		.byte	0
 1865 008f 0C       		.uleb128 0xc
 1866 0090 04       		.uleb128 0x4
 1867 0091 01       		.byte	0x1
 1868 0092 0B       		.uleb128 0xb
 1869 0093 0B       		.uleb128 0xb
 1870 0094 3A       		.uleb128 0x3a
 1871 0095 0B       		.uleb128 0xb
 1872 0096 3B       		.uleb128 0x3b
 1873 0097 05       		.uleb128 0x5
 1874 0098 01       		.uleb128 0x1
 1875 0099 13       		.uleb128 0x13
 1876 009a 00       		.byte	0
 1877 009b 00       		.byte	0
 1878 009c 0D       		.uleb128 0xd
 1879 009d 28       		.uleb128 0x28
 1880 009e 00       		.byte	0
 1881 009f 03       		.uleb128 0x3
 1882 00a0 0E       		.uleb128 0xe
 1883 00a1 1C       		.uleb128 0x1c
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 39


 1884 00a2 0D       		.uleb128 0xd
 1885 00a3 00       		.byte	0
 1886 00a4 00       		.byte	0
 1887 00a5 0E       		.uleb128 0xe
 1888 00a6 0D       		.uleb128 0xd
 1889 00a7 00       		.byte	0
 1890 00a8 03       		.uleb128 0x3
 1891 00a9 08       		.uleb128 0x8
 1892 00aa 3A       		.uleb128 0x3a
 1893 00ab 0B       		.uleb128 0xb
 1894 00ac 3B       		.uleb128 0x3b
 1895 00ad 0B       		.uleb128 0xb
 1896 00ae 49       		.uleb128 0x49
 1897 00af 13       		.uleb128 0x13
 1898 00b0 38       		.uleb128 0x38
 1899 00b1 0B       		.uleb128 0xb
 1900 00b2 00       		.byte	0
 1901 00b3 00       		.byte	0
 1902 00b4 0F       		.uleb128 0xf
 1903 00b5 01       		.uleb128 0x1
 1904 00b6 01       		.byte	0x1
 1905 00b7 49       		.uleb128 0x49
 1906 00b8 13       		.uleb128 0x13
 1907 00b9 01       		.uleb128 0x1
 1908 00ba 13       		.uleb128 0x13
 1909 00bb 00       		.byte	0
 1910 00bc 00       		.byte	0
 1911 00bd 10       		.uleb128 0x10
 1912 00be 21       		.uleb128 0x21
 1913 00bf 00       		.byte	0
 1914 00c0 49       		.uleb128 0x49
 1915 00c1 13       		.uleb128 0x13
 1916 00c2 2F       		.uleb128 0x2f
 1917 00c3 0B       		.uleb128 0xb
 1918 00c4 00       		.byte	0
 1919 00c5 00       		.byte	0
 1920 00c6 11       		.uleb128 0x11
 1921 00c7 2E       		.uleb128 0x2e
 1922 00c8 00       		.byte	0
 1923 00c9 3F       		.uleb128 0x3f
 1924 00ca 19       		.uleb128 0x19
 1925 00cb 03       		.uleb128 0x3
 1926 00cc 0E       		.uleb128 0xe
 1927 00cd 3A       		.uleb128 0x3a
 1928 00ce 0B       		.uleb128 0xb
 1929 00cf 3B       		.uleb128 0x3b
 1930 00d0 0B       		.uleb128 0xb
 1931 00d1 27       		.uleb128 0x27
 1932 00d2 19       		.uleb128 0x19
 1933 00d3 11       		.uleb128 0x11
 1934 00d4 01       		.uleb128 0x1
 1935 00d5 12       		.uleb128 0x12
 1936 00d6 06       		.uleb128 0x6
 1937 00d7 40       		.uleb128 0x40
 1938 00d8 18       		.uleb128 0x18
 1939 00d9 9642     		.uleb128 0x2116
 1940 00db 19       		.uleb128 0x19
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 40


 1941 00dc 00       		.byte	0
 1942 00dd 00       		.byte	0
 1943 00de 12       		.uleb128 0x12
 1944 00df 2E       		.uleb128 0x2e
 1945 00e0 01       		.byte	0x1
 1946 00e1 3F       		.uleb128 0x3f
 1947 00e2 19       		.uleb128 0x19
 1948 00e3 03       		.uleb128 0x3
 1949 00e4 0E       		.uleb128 0xe
 1950 00e5 3A       		.uleb128 0x3a
 1951 00e6 0B       		.uleb128 0xb
 1952 00e7 3B       		.uleb128 0x3b
 1953 00e8 0B       		.uleb128 0xb
 1954 00e9 27       		.uleb128 0x27
 1955 00ea 19       		.uleb128 0x19
 1956 00eb 11       		.uleb128 0x11
 1957 00ec 01       		.uleb128 0x1
 1958 00ed 12       		.uleb128 0x12
 1959 00ee 06       		.uleb128 0x6
 1960 00ef 40       		.uleb128 0x40
 1961 00f0 18       		.uleb128 0x18
 1962 00f1 9642     		.uleb128 0x2116
 1963 00f3 19       		.uleb128 0x19
 1964 00f4 01       		.uleb128 0x1
 1965 00f5 13       		.uleb128 0x13
 1966 00f6 00       		.byte	0
 1967 00f7 00       		.byte	0
 1968 00f8 13       		.uleb128 0x13
 1969 00f9 05       		.uleb128 0x5
 1970 00fa 00       		.byte	0
 1971 00fb 03       		.uleb128 0x3
 1972 00fc 0E       		.uleb128 0xe
 1973 00fd 3A       		.uleb128 0x3a
 1974 00fe 0B       		.uleb128 0xb
 1975 00ff 3B       		.uleb128 0x3b
 1976 0100 0B       		.uleb128 0xb
 1977 0101 49       		.uleb128 0x49
 1978 0102 13       		.uleb128 0x13
 1979 0103 02       		.uleb128 0x2
 1980 0104 18       		.uleb128 0x18
 1981 0105 00       		.byte	0
 1982 0106 00       		.byte	0
 1983 0107 14       		.uleb128 0x14
 1984 0108 34       		.uleb128 0x34
 1985 0109 00       		.byte	0
 1986 010a 03       		.uleb128 0x3
 1987 010b 0E       		.uleb128 0xe
 1988 010c 3A       		.uleb128 0x3a
 1989 010d 0B       		.uleb128 0xb
 1990 010e 3B       		.uleb128 0x3b
 1991 010f 0B       		.uleb128 0xb
 1992 0110 49       		.uleb128 0x49
 1993 0111 13       		.uleb128 0x13
 1994 0112 02       		.uleb128 0x2
 1995 0113 18       		.uleb128 0x18
 1996 0114 00       		.byte	0
 1997 0115 00       		.byte	0
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 41


 1998 0116 15       		.uleb128 0x15
 1999 0117 34       		.uleb128 0x34
 2000 0118 00       		.byte	0
 2001 0119 03       		.uleb128 0x3
 2002 011a 0E       		.uleb128 0xe
 2003 011b 3A       		.uleb128 0x3a
 2004 011c 0B       		.uleb128 0xb
 2005 011d 3B       		.uleb128 0x3b
 2006 011e 0B       		.uleb128 0xb
 2007 011f 49       		.uleb128 0x49
 2008 0120 13       		.uleb128 0x13
 2009 0121 00       		.byte	0
 2010 0122 00       		.byte	0
 2011 0123 16       		.uleb128 0x16
 2012 0124 0B       		.uleb128 0xb
 2013 0125 01       		.byte	0x1
 2014 0126 11       		.uleb128 0x11
 2015 0127 01       		.uleb128 0x1
 2016 0128 12       		.uleb128 0x12
 2017 0129 06       		.uleb128 0x6
 2018 012a 00       		.byte	0
 2019 012b 00       		.byte	0
 2020 012c 17       		.uleb128 0x17
 2021 012d 34       		.uleb128 0x34
 2022 012e 00       		.byte	0
 2023 012f 03       		.uleb128 0x3
 2024 0130 08       		.uleb128 0x8
 2025 0131 3A       		.uleb128 0x3a
 2026 0132 0B       		.uleb128 0xb
 2027 0133 3B       		.uleb128 0x3b
 2028 0134 0B       		.uleb128 0xb
 2029 0135 49       		.uleb128 0x49
 2030 0136 13       		.uleb128 0x13
 2031 0137 02       		.uleb128 0x2
 2032 0138 18       		.uleb128 0x18
 2033 0139 00       		.byte	0
 2034 013a 00       		.byte	0
 2035 013b 18       		.uleb128 0x18
 2036 013c 2E       		.uleb128 0x2e
 2037 013d 01       		.byte	0x1
 2038 013e 3F       		.uleb128 0x3f
 2039 013f 19       		.uleb128 0x19
 2040 0140 03       		.uleb128 0x3
 2041 0141 0E       		.uleb128 0xe
 2042 0142 3A       		.uleb128 0x3a
 2043 0143 0B       		.uleb128 0xb
 2044 0144 3B       		.uleb128 0x3b
 2045 0145 0B       		.uleb128 0xb
 2046 0146 11       		.uleb128 0x11
 2047 0147 01       		.uleb128 0x1
 2048 0148 12       		.uleb128 0x12
 2049 0149 06       		.uleb128 0x6
 2050 014a 40       		.uleb128 0x40
 2051 014b 18       		.uleb128 0x18
 2052 014c 9642     		.uleb128 0x2116
 2053 014e 19       		.uleb128 0x19
 2054 014f 01       		.uleb128 0x1
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 42


 2055 0150 13       		.uleb128 0x13
 2056 0151 00       		.byte	0
 2057 0152 00       		.byte	0
 2058 0153 19       		.uleb128 0x19
 2059 0154 2E       		.uleb128 0x2e
 2060 0155 01       		.byte	0x1
 2061 0156 3F       		.uleb128 0x3f
 2062 0157 19       		.uleb128 0x19
 2063 0158 03       		.uleb128 0x3
 2064 0159 0E       		.uleb128 0xe
 2065 015a 3A       		.uleb128 0x3a
 2066 015b 0B       		.uleb128 0xb
 2067 015c 3B       		.uleb128 0x3b
 2068 015d 0B       		.uleb128 0xb
 2069 015e 27       		.uleb128 0x27
 2070 015f 19       		.uleb128 0x19
 2071 0160 11       		.uleb128 0x11
 2072 0161 01       		.uleb128 0x1
 2073 0162 12       		.uleb128 0x12
 2074 0163 06       		.uleb128 0x6
 2075 0164 40       		.uleb128 0x40
 2076 0165 18       		.uleb128 0x18
 2077 0166 9742     		.uleb128 0x2117
 2078 0168 19       		.uleb128 0x19
 2079 0169 01       		.uleb128 0x1
 2080 016a 13       		.uleb128 0x13
 2081 016b 00       		.byte	0
 2082 016c 00       		.byte	0
 2083 016d 1A       		.uleb128 0x1a
 2084 016e 05       		.uleb128 0x5
 2085 016f 00       		.byte	0
 2086 0170 03       		.uleb128 0x3
 2087 0171 08       		.uleb128 0x8
 2088 0172 3A       		.uleb128 0x3a
 2089 0173 0B       		.uleb128 0xb
 2090 0174 3B       		.uleb128 0x3b
 2091 0175 0B       		.uleb128 0xb
 2092 0176 49       		.uleb128 0x49
 2093 0177 13       		.uleb128 0x13
 2094 0178 02       		.uleb128 0x2
 2095 0179 18       		.uleb128 0x18
 2096 017a 00       		.byte	0
 2097 017b 00       		.byte	0
 2098 017c 1B       		.uleb128 0x1b
 2099 017d 34       		.uleb128 0x34
 2100 017e 00       		.byte	0
 2101 017f 03       		.uleb128 0x3
 2102 0180 0E       		.uleb128 0xe
 2103 0181 3A       		.uleb128 0x3a
 2104 0182 0B       		.uleb128 0xb
 2105 0183 3B       		.uleb128 0x3b
 2106 0184 05       		.uleb128 0x5
 2107 0185 49       		.uleb128 0x49
 2108 0186 13       		.uleb128 0x13
 2109 0187 3F       		.uleb128 0x3f
 2110 0188 19       		.uleb128 0x19
 2111 0189 3C       		.uleb128 0x3c
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 43


 2112 018a 19       		.uleb128 0x19
 2113 018b 00       		.byte	0
 2114 018c 00       		.byte	0
 2115 018d 1C       		.uleb128 0x1c
 2116 018e 35       		.uleb128 0x35
 2117 018f 00       		.byte	0
 2118 0190 49       		.uleb128 0x49
 2119 0191 13       		.uleb128 0x13
 2120 0192 00       		.byte	0
 2121 0193 00       		.byte	0
 2122 0194 1D       		.uleb128 0x1d
 2123 0195 34       		.uleb128 0x34
 2124 0196 00       		.byte	0
 2125 0197 03       		.uleb128 0x3
 2126 0198 0E       		.uleb128 0xe
 2127 0199 3A       		.uleb128 0x3a
 2128 019a 0B       		.uleb128 0xb
 2129 019b 3B       		.uleb128 0x3b
 2130 019c 0B       		.uleb128 0xb
 2131 019d 49       		.uleb128 0x49
 2132 019e 13       		.uleb128 0x13
 2133 019f 3F       		.uleb128 0x3f
 2134 01a0 19       		.uleb128 0x19
 2135 01a1 02       		.uleb128 0x2
 2136 01a2 18       		.uleb128 0x18
 2137 01a3 00       		.byte	0
 2138 01a4 00       		.byte	0
 2139 01a5 1E       		.uleb128 0x1e
 2140 01a6 26       		.uleb128 0x26
 2141 01a7 00       		.byte	0
 2142 01a8 49       		.uleb128 0x49
 2143 01a9 13       		.uleb128 0x13
 2144 01aa 00       		.byte	0
 2145 01ab 00       		.byte	0
 2146 01ac 1F       		.uleb128 0x1f
 2147 01ad 21       		.uleb128 0x21
 2148 01ae 00       		.byte	0
 2149 01af 49       		.uleb128 0x49
 2150 01b0 13       		.uleb128 0x13
 2151 01b1 2F       		.uleb128 0x2f
 2152 01b2 05       		.uleb128 0x5
 2153 01b3 00       		.byte	0
 2154 01b4 00       		.byte	0
 2155 01b5 00       		.byte	0
 2156              		.section	.debug_aranges,"",%progbits
 2157 0000 5C000000 		.4byte	0x5c
 2158 0004 0200     		.2byte	0x2
 2159 0006 00000000 		.4byte	.Ldebug_info0
 2160 000a 04       		.byte	0x4
 2161 000b 00       		.byte	0
 2162 000c 0000     		.2byte	0
 2163 000e 0000     		.2byte	0
 2164 0010 00000000 		.4byte	.LFB63
 2165 0014 1C000000 		.4byte	.LFE63-.LFB63
 2166 0018 00000000 		.4byte	.LFB64
 2167 001c 0A000000 		.4byte	.LFE64-.LFB64
 2168 0020 00000000 		.4byte	.LFB65
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 44


 2169 0024 A8010000 		.4byte	.LFE65-.LFB65
 2170 0028 00000000 		.4byte	.LFB66
 2171 002c 90010000 		.4byte	.LFE66-.LFB66
 2172 0030 00000000 		.4byte	.LFB67
 2173 0034 60010000 		.4byte	.LFE67-.LFB67
 2174 0038 00000000 		.4byte	.LFB68
 2175 003c 48000000 		.4byte	.LFE68-.LFB68
 2176 0040 00000000 		.4byte	.LFB69
 2177 0044 50000000 		.4byte	.LFE69-.LFB69
 2178 0048 00000000 		.4byte	.LFB70
 2179 004c 28000000 		.4byte	.LFE70-.LFB70
 2180 0050 00000000 		.4byte	.LFB71
 2181 0054 78000000 		.4byte	.LFE71-.LFB71
 2182 0058 00000000 		.4byte	0
 2183 005c 00000000 		.4byte	0
 2184              		.section	.debug_ranges,"",%progbits
 2185              	.Ldebug_ranges0:
 2186 0000 00000000 		.4byte	.LFB63
 2187 0004 1C000000 		.4byte	.LFE63
 2188 0008 00000000 		.4byte	.LFB64
 2189 000c 0A000000 		.4byte	.LFE64
 2190 0010 00000000 		.4byte	.LFB65
 2191 0014 A8010000 		.4byte	.LFE65
 2192 0018 00000000 		.4byte	.LFB66
 2193 001c 90010000 		.4byte	.LFE66
 2194 0020 00000000 		.4byte	.LFB67
 2195 0024 60010000 		.4byte	.LFE67
 2196 0028 00000000 		.4byte	.LFB68
 2197 002c 48000000 		.4byte	.LFE68
 2198 0030 00000000 		.4byte	.LFB69
 2199 0034 50000000 		.4byte	.LFE69
 2200 0038 00000000 		.4byte	.LFB70
 2201 003c 28000000 		.4byte	.LFE70
 2202 0040 00000000 		.4byte	.LFB71
 2203 0044 78000000 		.4byte	.LFE71
 2204 0048 00000000 		.4byte	0
 2205 004c 00000000 		.4byte	0
 2206              		.section	.debug_line,"",%progbits
 2207              	.Ldebug_line0:
 2208 0000 54030000 		.section	.debug_str,"MS",%progbits,1
 2208      02008401 
 2208      00000201 
 2208      FB0E0D00 
 2208      01010101 
 2209              	.LASF47:
 2210 0000 73645F69 		.ascii	"sd_init\000"
 2210      6E697400 
 2211              	.LASF30:
 2212 0008 46535F57 		.ascii	"FS_WRITEMODE_FAST\000"
 2212      52495445 
 2212      4D4F4445 
 2212      5F464153 
 2212      5400
 2213              	.LASF43:
 2214 001a 64617465 		.ascii	"date_str\000"
 2214      5F737472 
 2214      00
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 45


 2215              	.LASF55:
 2216 0023 73645F62 		.ascii	"sd_buffer\000"
 2216      75666665 
 2216      7200
 2217              	.LASF52:
 2218 002d 61746F6D 		.ascii	"atomic_state\000"
 2218      69635F73 
 2218      74617465 
 2218      00
 2219              	.LASF2:
 2220 003a 73686F72 		.ascii	"short int\000"
 2220      7420696E 
 2220      7400
 2221              	.LASF62:
 2222 0044 666F726D 		.ascii	"format_file\000"
 2222      61745F66 
 2222      696C6500 
 2223              	.LASF44:
 2224 0050 66696C65 		.ascii	"file_str\000"
 2224      5F737472 
 2224      00
 2225              	.LASF27:
 2226 0059 46535F46 		.ascii	"FS_FILETIME\000"
 2226      494C4554 
 2226      494D4500 
 2227              	.LASF51:
 2228 0065 746D705F 		.ascii	"tmp_time\000"
 2228      74696D65 
 2228      00
 2229              	.LASF8:
 2230 006e 5F5F7569 		.ascii	"__uint32_t\000"
 2230      6E743332 
 2230      5F7400
 2231              	.LASF54:
 2232 0079 73645F72 		.ascii	"sd_read\000"
 2232      65616400 
 2233              	.LASF4:
 2234 0081 5F5F7569 		.ascii	"__uint16_t\000"
 2234      6E743136 
 2234      5F7400
 2235              	.LASF41:
 2236 008c 706F7765 		.ascii	"power_interrupt\000"
 2236      725F696E 
 2236      74657272 
 2236      75707400 
 2237              	.LASF39:
 2238 009c 79656172 		.ascii	"year\000"
 2238      00
 2239              	.LASF31:
 2240 00a1 6D696C6C 		.ascii	"millicounter\000"
 2240      69636F75 
 2240      6E746572 
 2240      00
 2241              	.LASF13:
 2242 00ae 75696E74 		.ascii	"uint8_t\000"
 2242      385F7400 
 2243              	.LASF46:
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 46


 2244 00b6 66696C65 		.ascii	"file_timestamp\000"
 2244      5F74696D 
 2244      65737461 
 2244      6D7000
 2245              	.LASF61:
 2246 00c5 7365745F 		.ascii	"set_time_file\000"
 2246      74696D65 
 2246      5F66696C 
 2246      6500
 2247              	.LASF53:
 2248 00d3 73645F77 		.ascii	"sd_write\000"
 2248      72697465 
 2248      00
 2249              	.LASF17:
 2250 00dc 666C6F61 		.ascii	"float\000"
 2250      7400
 2251              	.LASF28:
 2252 00e2 46535F57 		.ascii	"FS_WRITEMODE_SAFE\000"
 2252      52495445 
 2252      4D4F4445 
 2252      5F534146 
 2252      4500
 2253              	.LASF10:
 2254 00f4 6C6F6E67 		.ascii	"long long int\000"
 2254      206C6F6E 
 2254      6720696E 
 2254      7400
 2255              	.LASF69:
 2256 0102 7673697A 		.ascii	"vsize\000"
 2256      6500
 2257              	.LASF48:
 2258 0108 73645F74 		.ascii	"sd_time_set\000"
 2258      696D655F 
 2258      73657400 
 2259              	.LASF65:
 2260 0114 73645F74 		.ascii	"sd_tail\000"
 2260      61696C00 
 2261              	.LASF22:
 2262 011c 59656172 		.ascii	"Year\000"
 2262      00
 2263              	.LASF3:
 2264 0121 5F5F7569 		.ascii	"__uint8_t\000"
 2264      6E74385F 
 2264      7400
 2265              	.LASF40:
 2266 012b 54696D65 		.ascii	"Time\000"
 2266      00
 2267              	.LASF36:
 2268 0130 686F7572 		.ascii	"hour\000"
 2268      00
 2269              	.LASF32:
 2270 0135 6C656E67 		.ascii	"length\000"
 2270      746800
 2271              	.LASF1:
 2272 013c 756E7369 		.ascii	"unsigned char\000"
 2272      676E6564 
 2272      20636861 
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 47


 2272      7200
 2273              	.LASF45:
 2274 014a 66696C65 		.ascii	"file_time\000"
 2274      5F74696D 
 2274      6500
 2275              	.LASF21:
 2276 0154 46535F46 		.ascii	"FS_FILE\000"
 2276      494C4500 
 2277              	.LASF0:
 2278 015c 7369676E 		.ascii	"signed char\000"
 2278      65642063 
 2278      68617200 
 2279              	.LASF38:
 2280 0168 7365636F 		.ascii	"second\000"
 2280      6E6400
 2281              	.LASF11:
 2282 016f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2282      206C6F6E 
 2282      6720756E 
 2282      7369676E 
 2282      65642069 
 2283              	.LASF16:
 2284 0186 75696E74 		.ascii	"uint32_t\000"
 2284      33325F74 
 2284      00
 2285              	.LASF12:
 2286 018f 756E7369 		.ascii	"unsigned int\000"
 2286      676E6564 
 2286      20696E74 
 2286      00
 2287              	.LASF14:
 2288 019c 75696E74 		.ascii	"uint16_t\000"
 2288      31365F74 
 2288      00
 2289              	.LASF9:
 2290 01a5 6C6F6E67 		.ascii	"long unsigned int\000"
 2290      20756E73 
 2290      69676E65 
 2290      6420696E 
 2290      7400
 2291              	.LASF49:
 2292 01b7 74696D65 		.ascii	"time\000"
 2292      00
 2293              	.LASF5:
 2294 01bc 73686F72 		.ascii	"short unsigned int\000"
 2294      7420756E 
 2294      7369676E 
 2294      65642069 
 2294      6E7400
 2295              	.LASF24:
 2296 01cf 486F7572 		.ascii	"Hour\000"
 2296      00
 2297              	.LASF19:
 2298 01d4 63686172 		.ascii	"char\000"
 2298      00
 2299              	.LASF7:
 2300 01d9 6C6F6E67 		.ascii	"long int\000"
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 48


 2300      20696E74 
 2300      00
 2301              	.LASF15:
 2302 01e2 696E7433 		.ascii	"int32_t\000"
 2302      325F7400 
 2303              	.LASF35:
 2304 01ea 6D6F6E74 		.ascii	"month\000"
 2304      6800
 2305              	.LASF34:
 2306 01f0 44617461 		.ascii	"DataPacket\000"
 2306      5061636B 
 2306      657400
 2307              	.LASF66:
 2308 01fb 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2308      4320342E 
 2308      392E3320 
 2308      32303135 
 2308      30333033 
 2309 022e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2309      20726576 
 2309      6973696F 
 2309      6E203232 
 2309      31323230 
 2310 0261 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2310      66756E63 
 2310      74696F6E 
 2310      2D736563 
 2310      74696F6E 
 2311              	.LASF33:
 2312 0289 64617461 		.ascii	"data\000"
 2312      00
 2313              	.LASF50:
 2314 028e 62756666 		.ascii	"buffer\000"
 2314      657200
 2315              	.LASF37:
 2316 0295 6D696E75 		.ascii	"minute\000"
 2316      746500
 2317              	.LASF68:
 2318 029c 443A5C44 		.ascii	"D:\\Downloads\\FRUCD\\Node-Beaver\\Node-Beaver\\Nod"
 2318      6F776E6C 
 2318      6F616473 
 2318      5C465255 
 2318      43445C4E 
 2319 02ca 652D4265 		.ascii	"e-Beaver.cydsn\000"
 2319      61766572 
 2319      2E637964 
 2319      736E00
 2320              	.LASF26:
 2321 02d9 5365636F 		.ascii	"Second\000"
 2321      6E6400
 2322              	.LASF67:
 2323 02e0 73645F6D 		.ascii	"sd_manager.c\000"
 2323      616E6167 
 2323      65722E63 
 2323      00
 2324              	.LASF64:
 2325 02ed 73645F68 		.ascii	"sd_head\000"
ARM GAS  D:\Windows\AppData\Local\Temp\ccEmsZpM.s 			page 49


 2325      65616400 
 2326              	.LASF18:
 2327 02f5 646F7562 		.ascii	"double\000"
 2327      6C6500
 2328              	.LASF29:
 2329 02fc 46535F57 		.ascii	"FS_WRITEMODE_MEDIUM\000"
 2329      52495445 
 2329      4D4F4445 
 2329      5F4D4544 
 2329      49554D00 
 2330              	.LASF6:
 2331 0310 5F5F696E 		.ascii	"__int32_t\000"
 2331      7433325F 
 2331      7400
 2332              	.LASF59:
 2333 031a 7066696C 		.ascii	"pfile\000"
 2333      6500
 2334              	.LASF60:
 2335 0320 73645F6F 		.ascii	"sd_ok\000"
 2335      6B00
 2336              	.LASF63:
 2337 0326 73645F71 		.ascii	"sd_queue\000"
 2337      75657565 
 2337      00
 2338              	.LASF20:
 2339 032f 73697A65 		.ascii	"sizetype\000"
 2339      74797065 
 2339      00
 2340              	.LASF56:
 2341 0338 73645F73 		.ascii	"sd_stop\000"
 2341      746F7000 
 2342              	.LASF42:
 2343 0340 73645F69 		.ascii	"sd_interrupt\000"
 2343      6E746572 
 2343      72757074 
 2343      00
 2344              	.LASF58:
 2345 034d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2345      52784275 
 2345      66666572 
 2345      00
 2346              	.LASF23:
 2347 035a 4D6F6E74 		.ascii	"Month\000"
 2347      6800
 2348              	.LASF25:
 2349 0360 4D696E75 		.ascii	"Minute\000"
 2349      746500
 2350              	.LASF57:
 2351 0367 73645F77 		.ascii	"sd_writetest\000"
 2351      72697465 
 2351      74657374 
 2351      00
 2352              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
